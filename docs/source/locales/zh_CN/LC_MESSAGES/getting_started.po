# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, WANG Hailin
# This file is distributed under the same license as the abqpy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version:  abqpy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-30 00:31+0000\n"
"PO-Revision-Date: 2022-08-29 13:21+0800\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../getting_started.md:1
msgid "Getting Started"
msgstr "入门指南"

#: ../../getting_started.md:3
msgid "Introduction"
msgstr "简介"

#: ../../getting_started.md:5
msgid ""
"`abqpy` is a Python package providing type hints for Python scripting of "
"Abaqus, you can use it to write you Python script of Abaqus fluently, "
"even without doing anything in Abaqus. It also provides some simple APIs "
"to execute the Abaqus commands so that you can run your Python script to "
"build the model, submit the job and extract the output data in just one "
"Python script, even without opening the Abaqus/CAE."
msgstr ""
"`abqpy` 是一个 Python 包，提供了一些类型提示，用于快速编写你的 Abaqus/Python 脚本，即便不打开 "
"Abaqus/CAE。它还提供了一些简单的API用于调用 Abaqus 命令执行你的 Python 脚本，以便使用 Python 脚本快速构建 "
"Abaqus 模型，并提交作业给 Abaqus 进行计算，并从计算结果中提取数据。"

#: ../../getting_started.md:11
msgid "Installation"
msgstr "安装"

#: ../../getting_started.md:13
msgid ""
"`abqpy` supports Python 3.7 or a later version. If you are using Python "
"3.6 or an earlier version, please upgrade to Python 3.7 or a later "
"version."
msgstr ""
"`abqpy` 支持 Python 3.7 或更高版本。如果您使用的是 Python 3.6 或更早版本，请升级到 Python 3.7 "
"或更高版本。"

#: ../../getting_started.md:22
msgid "Working with conda?"
msgstr ""

#: ../../getting_started.md:25
#, fuzzy
msgid ""
"`abqpy` can be installed via conda from `anaconda "
"<https://anaconda.org/haiiliin/abqpy>`_."
msgstr ""
"`abqpy` 也被上传到 `anaconda "
"<https://anaconda.org/haiiliin/abqpy>`_，你可以使用`conda`来安装它："

#: ../../getting_started.md:35
msgid "Prefer pip?"
msgstr ""

#: ../../getting_started.md:38
msgid ""
"abqpy can also be installed via pip from `PyPI "
"<https://pypi.org/project/abqpy>`__."
msgstr ""

#: ../../getting_started.md:49
msgid "Install from source?"
msgstr ""

#: ../../getting_started.md:52
msgid "You can also install `abqpy` from source:"
msgstr ""

#: ../../getting_started.md:62
#, fuzzy
msgid "Install a specific version"
msgstr "安装特定版本"

#: ../../getting_started.md:65
msgid "You can specify the version number when installing `abqpy`, for example:"
msgstr "您可以在安装 `abqpy` 时指定版本号，例如："

#: ../../getting_started.md:77
msgid "Optional dependencies"
msgstr ""

#: ../../getting_started.md:80
msgid ""
"If you want to use the Jupyter notebook to write your Abaqus/Python "
"scripts, use the following command:"
msgstr ""

#: ../../getting_started.md:91
msgid "Two Python interpreters"
msgstr "两个 Python 解释器"

#: ../../getting_started.md:93
msgid ""
"Before we go any further, it is necessary for us to understand two Python"
" interpreters."
msgstr "在我们进一步讨论之前，我们有必要了解两个 Python 解释器。"

#: ../../getting_started.md:95
msgid ""
"When we use the Abaqus/CAE graphical user interface (GUI) to create a "
"model and to visualize the results, commands are issued internally by "
"Abaqus/CAE after every operation. These commands reflect the geometry you"
" created along with the options and settings you selected from each "
"dialog box. The GUI generates commands in an object-oriented programming "
"language called Python. The commands issued by the GUI are sent to the "
"Abaqus/CAE kernel. The kernel interprets the commands and uses the "
"options and settings to create an internal representation of our model. "
"The kernel is the brains behind Abaqus/CAE. The GUI is the interface "
"between the user and the kernel."
msgstr ""
"当我们使用 Abaqus/CAE 图形用户界面（GUI）创建模型并可视化结果时，命令由 Abaqus/CAE "
"在每次操作后在内部发出。这些命令反映您创建的几何图形以及从每个对话框中选择的选项和设置。GUI 使用名为 Python "
"的面向对象编程语言生成命令。GUI 发出的命令将发送到 Abaqus/CAE 内核。内核解释命令，并使用选项和设置来创建模型的内部表示。内核是 "
"Abaqus/CAE 背后的大脑。GUI 是用户和内核之间的接口。"

#: ../../getting_started.md:104
msgid ""
"In a word, Abaqus use Python language to interact with the Abaqus kernel,"
" everything that can be done in Abaqus/CAE, can also be done using Python"
" script. Abaqus has already installed a Python interpreter so that "
"Abaqus/CAE can use it to interact with the Abaqus kernel."
msgstr ""
"总之，Abaqus 使用 Python 语言与 Abaqus 内核进行交互，所有可以在 Abaqus/CAE 中 完成的事情，也可以使用 "
"Python 脚本完成。Abaqus  已经安装了一个 Python 解释器，以便Abaqus/CAE可以使用它与 Abaqus 内核进行交互。"

#: ../../getting_started.md:108
msgid ""
"For some reasons, we cannot directly use the Python interpreter inside "
"Abaqus to build an Abaqus model. But fortunately, we can use the commands"
" provided by Abaqus to access it. i.e."
msgstr ""
"由于某些原因，我们不能直接使用 Abaqus 内部的 Python 解释器来构建 Abaqus 模型。但幸运的是，我们可以使用 Abaqus "
"提供的命令来访问它。即："

#: ../../getting_started.md:129
msgid ""
"Usually, we can use the noGUI-file or script-file to execute our Python "
"script in Abaqus."
msgstr "通常，我们可以使用 noGUI-file 或 script-file 选项在 Abaqu 中执行我们的 Python 脚本。"

#: ../../getting_started.md:131
msgid ""
"Another Python interpreter, is the Python interpreter installed by "
"ourselves, where `abqpy` is installed. `abqpy` provides a bridge to "
"connect our Python script to Abaqus Python interpreter, it provides type "
"hints for Python scripting for Abaqus, enabling us to write a Abaqus "
"Python script quickly."
msgstr ""
"另一个 Python 解释器是我们自己安装的 Python 解释器，其中安装了 `abqpy`。`abqpy` 提供了一个将我们的 Python "
"脚本连接到 Abaqus Python 解释器的桥梁，它为 Abaqus 的 Python 脚本提供了类型提示，使我们能够快速编写 Abaqus "
"Python 脚本。"

#: ../../getting_started.md:136
msgid "How does this package work?"
msgstr "这个包是如何工作的？"

#: ../../getting_started.md:138
msgid ""
"`abqpy` is just a package to provide type hints for Abaqus/Python "
"scripting, it is installed outside Abaqus/Python environment, you can use"
" `abqpy` to write your Abaqus/Python scripts, and run the scripts inside "
"Abaqus on your own. However, with the help of Abaqus command, an easier "
"way can be achieved: **you can actually run the script using your own "
"Python interpreter without opening Abaqus**, which is achieved via the "
"**abaqus** command like this:"
msgstr ""
"`abqpy` 只是一个为 Abaqus/Python 脚本提供类型提示的包，它安装在 Abaqus/Python 环境之外，你可以使用 "
"`abqpy` 来编写你的 Abaqus/Python 脚本，并自己在 Abaqus 里面运行脚本。但是，在 Abaqus "
"命令的帮助下，可以实现一种更简单的方法：**您实际上可以使用自己的 Python 解释器运行脚本而无需打开 Abaqus**，这是通过 "
"**abaqus** 命令实现的，如下所示："

#: ../../getting_started.md:147
#, fuzzy
msgid "The secret is hided in the {py:meth}`~abqpy.abaqus.run` function:"
msgstr "这个秘密隐藏在 :py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` 方法中："

#: ../../getting_started.md:163
msgid ""
"In this package, the {py:mod}`~abaqus` module is reimplemented to "
"automatically call this function. If you import this module in the top of"
" your script (i.e., `from abaqus import *`), your Python interpreter (not"
" Abaqus Python interpreter) will call this function and use the "
"**abaqus** command to submit the script to Abaqus. After it is submitted "
"to Abaqus, {py:meth}`~abqpy.abaqus.run` will exit the interpreter, "
"because the script will already run in Abaqus Python interpreter."
msgstr ""

#: ../../getting_started.md:168
msgid ""
"In the output script, we might not want to always use the "
"{py:mod}`~abaqus` module, because it needs the Abaqus/CAE kernel (and its"
" license). Instead, we use the module {py:mod}`~odbAccess` (i.e., `from "
"odbAccess import *`), which requires only the Abaqus Python interpreter. "
"Then, another similar **abaqus** command line is needed:"
msgstr ""

#: ../../getting_started.md:176
msgid ""
"So, the {py:mod}`~odbAccess` module is also reimplemented to call the "
"{py:meth}`~abqpy.abaqus.run` function, and the actual implementation of "
"this function is similar to:"
msgstr ""

#: ../../getting_started.md:194
msgid ""
"In summary: this function will be called when you import one of the two "
"modules ({py:mod}`~abaqus` or {py:mod}`~odbAccess`). It will pass the "
"argument `cae = True` in {py:mod}`~abaqus` module and `cae = False` in "
"{py:mod}`~odbAccess` module. Therefore, if you want to run your Python "
"script in Abaqus Python environment, please make sure to import one of "
"these modules on the top of your script."
msgstr ""

#: ../../getting_started.md:199
msgid "Write your Abaqus/Python script"
msgstr ""

#: ../../getting_started.md:201
msgid ""
"After installing the `abqpy` package, you can start writing your own "
"Abaqus/Python script to build your model. You can refer [abqpy/examples "
"at main · "
"haiiliin/abqpy](https://github.com/haiiliin/abqpy/tree/main/examples) for"
" some tests of the script, for more detailed documentation, please check "
"[abqpy documentation](https://haiiliin.com/abqpy/)."
msgstr ""

#: ../../getting_started.md:207
msgid "Setup your Abaqus Environment"
msgstr ""

#: ../../getting_started.md:209
#, fuzzy
msgid ""
"In order to use Abaqus command to execute the Python script and submit "
"the job, you need to tell `abqpy` where the Abaqus command is located. "
"Usually, Abaqus command locates in a directory like this:"
msgstr ""
"为了使用 Abaqus 命令执行 Python 脚本并提交作业，您需要告诉 `abqpy` Abaqus 命令所在的位置。通常，Abaqus "
"命令位于如下目录中："

#: ../../getting_started.md:216
msgid ""
"You can add the directory `C:/SIMULIA/Commands` to the system environment"
" variable `Path`, or you can create a new system variable named "
"`ABAQUS_BAT_PATH`, and set the value to the file path of the Abaqus "
"command, i.e., `C:/SIMULIA/Commands/abaqus.bat`."
msgstr ""
"您可以将目录 `C/SIMULIA/Commands` 添加到系统环境变量 `Path` 中，也可以创建一个名为 "
"`ABAQUS_BAT_PATH` 的新系统变量，并将值设置为 Abaqus 命令的文件路径，即 "
"`C:/SIMULIA/Commands/abaqus.bat`。"

#: ../../getting_started.md:220
msgid "Run your Abaqus/Python script"
msgstr ""

#: ../../getting_started.md:222
msgid ""
"Now you can just run your Abaqus/Python script using your own Python "
"interpreter that `abqpy` is installed."
msgstr ""

#: ../../getting_started.md:224 ../../getting_started.md:226
msgid "Create an Abaqus Model"
msgstr ""

#: ../../getting_started.md:232 ../../getting_started.md:234
msgid "Extract Output Data"
msgstr ""

#: ../../getting_started.md:240
msgid "What next?"
msgstr ""

#: ../../getting_started.md:242
msgid ""
"You may wonder how does this package work, you can go "
"{doc}`/getting_started` for more detailed introduction and go "
"{doc}`/tutorials` for a simple tutorial. For more documentation about "
"Abaqus/Python scripting, please check {doc}`/references` for more "
"detailed API references."
msgstr ""

#~ msgid ""
#~ "`abqpy` is uploaded to `PyPI "
#~ "<https://pypi.org/project/abqpy>`_, you can simply"
#~ " install it using pip, since abqpy"
#~ " (from V1.0.15) depends on `ipynbname` "
#~ "and it is not distributed to "
#~ "anaconda, you have to use `pip` to"
#~ " install it manually:"
#~ msgstr ""
#~ "`abqpy` 被上传到 `PyPI "
#~ "<https://pypi.org/project/abqpy>`_，你可以简单地使用 pip 安装它，因为 "
#~ "`abqpy` 依赖于 `ipynbname` （从 V1.0.15 开始），而"
#~ " `ipynbname` 并没有被上传到 Anaconda，因此你必须使用 `pip` "
#~ "手动安装它："

#~ msgid ""
#~ "In this package, the "
#~ ":py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` method is "
#~ "reimplemented, if you call this method"
#~ " in your script (i.e., "
#~ "`mdb.saveAs('model.cae')`), the Python interpreter"
#~ " (not Abaqus Python interpreter) will "
#~ "use the **abaqus** command to submit "
#~ "this script to Abaqus, when it is"
#~ " submited to Abaqus, "
#~ ":py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` will be just"
#~ " a normal method to save the "
#~ "model because `abqpy` is not installed"
#~ " in Abaqus Python interpreter."
#~ msgstr ""
#~ "在此包中，:py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` "
#~ "方法被重新实现，如果你在脚本中调用此方法（即 `mdb.saveAs('model.cae')`），Python "
#~ "解释器（而非 Abaqus Python 解释器）将使用 **abaqus** "
#~ "命令将此脚本提交给 Abaqus，当它被提交给 Abaqus "
#~ "时，:py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` 只是保存模型的一个正常方法，因为 "
#~ "`abqpy` 并没有被安装在 Abaqus Python 解释器中。"

#~ msgid ""
#~ "In the output script, we might not"
#~ " have to use the "
#~ ":py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` method, then "
#~ "another similar method "
#~ ":py:meth:`~abaqus.Session.Session.Session.openOdb` is also"
#~ " reimplemented:"
#~ msgstr ""
#~ "在输出脚本中，我们可能不必使用 :py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` "
#~ "方法，另一个类似的方法 :py:meth:`~abaqus.Session.Session.Session.openOdb`"
#~ " 也被重新实现："

#~ msgid ""
#~ "Therefore, if you want to run your"
#~ " Python script in Abaqus Python "
#~ "environment, please make sure to use "
#~ "these methods."
#~ msgstr "因此，如果您想在 Abaqus Python 环境中运行 Python 脚本，请确保使用这些方法。"

#~ msgid ""
#~ "In this package, the :py:mod:`~abaqus` "
#~ "module is reimplemented to automatically "
#~ "call this function. If you import "
#~ "this module in the top of your "
#~ "script (i.e., ``from abaqus import *``),"
#~ " your Python interpreter (not Abaqus "
#~ "Python interpreter) will call this "
#~ "function and use the **abaqus** command"
#~ " to submit the script to Abaqus. "
#~ "After it is submitted to Abaqus, "
#~ ":py:meth:`~abqpy.abaqus.run()` will exit the "
#~ "interpreter, because the script will "
#~ "already run in Abaqus Python "
#~ "interpreter."
#~ msgstr ""

#~ msgid ""
#~ "In the output script, we might not"
#~ " want to always use the "
#~ ":py:mod:`~abaqus` module, which needs the "
#~ "Abaqus/CAE kernel (and its license), but"
#~ " instead the module :py:mod:`~odbAccess` "
#~ "(i.e., ``from odbAccess import *``), "
#~ "which requires only the Abaqus Python"
#~ " interpreter. Then another similar "
#~ "**abaqus** command line is needed:"
#~ msgstr ""

#~ msgid ""
#~ "So, :py:mod:`~odbAccess` is also reimplemented"
#~ " to call the :py:meth:`~abqpy.abaqus.run()` "
#~ "function, and the actual implementation "
#~ "of this function is similar to:"
#~ msgstr ""

#~ msgid "Abaqus command"
#~ msgstr "Abaqus 命令"

#~ msgid ""
#~ "In order to use Abaqus command to"
#~ " execute the Python script and submit"
#~ " the job, you need to tell "
#~ "`abqpy` where the Abaqus command "
#~ "located. Usually, Abaqus command locates "
#~ "in a directory like this:"
#~ msgstr ""
#~ "为了使用 Abaqus 命令执行 Python 脚本并提交作业，您需要告诉 "
#~ "`abqpy` Abaqus 命令所在的位置。通常，Abaqus 命令位于如下目录中："

#~ msgid ""
#~ "You may wonder how does this "
#~ "package work, you can go "
#~ ":doc:`/getting_started` for more detailed "
#~ "introduction and go :doc:`/tutorials` for "
#~ "a simple tutorial. For more "
#~ "documentation about Abaqus/Python scripting, "
#~ "please check :doc:`/summary` for a list"
#~ " of descriptions of objects and "
#~ "methods of Abaqus models, check "
#~ ":doc:`/references` for more detailed API "
#~ "references."
#~ msgstr ""

#~ msgid ""
#~ "In this package, the :py:mod:`~abaqus` "
#~ "module is reimplemented to automatically "
#~ "call this function. If you import "
#~ "this module in the top of your "
#~ "script (i.e., ``from abaqus import *``),"
#~ " your Python interpreter (not Abaqus "
#~ "Python interpreter) will call this "
#~ "function and use the **abaqus** command"
#~ " to submit the script to Abaqus. "
#~ "After it is submitted to Abaqus, "
#~ ":py:meth:`~abqpy.abaqus.run` will exit the "
#~ "interpreter, because the script will "
#~ "already run in Abaqus Python "
#~ "interpreter."
#~ msgstr ""

#~ msgid ""
#~ "In the output script, we might not"
#~ " want to always use the "
#~ ":py:mod:`~abaqus` module, because it needs "
#~ "the Abaqus/CAE kernel (and its license)."
#~ " Instead, we use the module "
#~ ":py:mod:`~odbAccess` (i.e., ``from odbAccess "
#~ "import *``), which requires only the "
#~ "Abaqus Python interpreter. Then, another "
#~ "similar **abaqus** command line is "
#~ "needed:"
#~ msgstr ""

#~ msgid ""
#~ "So, the :py:mod:`~odbAccess` module is "
#~ "also reimplemented to call the "
#~ ":py:meth:`~abqpy.abaqus.run` function, and the "
#~ "actual implementation of this function "
#~ "is similar to:"
#~ msgstr ""

#~ msgid ""
#~ "In summary: this function will be "
#~ "called when you import one of the"
#~ " two modules (:py:mod:`~abaqus` or "
#~ ":py:mod:`~odbAccess`). It will pass the "
#~ "argument ``cae = True`` in "
#~ ":py:mod:`~abaqus` module and ``cae = "
#~ "False`` in :py:mod:`~odbAccess` module. "
#~ "Therefore, if you want to run your"
#~ " Python script in Abaqus Python "
#~ "environment, please make sure to import"
#~ " one of these modules on the "
#~ "top of your script."
#~ msgstr ""

#~ msgid ""
#~ "`abqpy` is uploaded to `PyPI "
#~ "<https://pypi.org/project/abqpy>`_, you can simply"
#~ " install it using pip:"
#~ msgstr ""
#~ "`abqpy` 也被上传到 `anaconda "
#~ "<https://anaconda.org/haiiliin/abqpy>`_，你可以使用`conda`来安装它："

#~ msgid ""
#~ "You may install the latest development"
#~ " version by cloning the `GitHub "
#~ "repository <https://github.com/haiiliin/abqpy>`_ and "
#~ "use `python` to install from the "
#~ "local directory:"
#~ msgstr ""
#~ "您可以通过克隆 `GitHub仓库 <https://github.com/haiiliin/abqpy>`_"
#~ " 来安装最新的开发版本，并使用 `python` 从本地目录进行安装："

#~ msgid "Optional Requirements"
#~ msgstr ""

#~ msgid ""
#~ "If you want to use the Jupyter "
#~ "notebook to write your Abaqus/Python "
#~ "scripts, you need to install "
#~ "`ipynbname`:"
#~ msgstr ""

#~ msgid "Using `pip`:"
#~ msgstr ""

#~ msgid "Using `conda`:"
#~ msgstr ""

#~ msgid "A better way is to use * to match specific version:"
#~ msgstr "更好的方法是使用 * 来匹配特定版本："

#~ msgid ""
#~ "After installing the `abqpy` package, "
#~ "you can start writing your own "
#~ "Abaqus/Python script to build your "
#~ "model. You can refer `abqpy/examples at"
#~ " main · haiiliin/abqpy "
#~ "<https://github.com/haiiliin/abqpy/tree/main/examples>`_ for "
#~ "some tests of the script, for more"
#~ " detailed documentation, please check "
#~ "`abqpy documentation <https://haiiliin.com/abqpy/>`_."
#~ msgstr ""

#~ msgid ""
#~ "You may wonder how does this "
#~ "package work, you can go "
#~ ":doc:`/getting_started` for more detailed "
#~ "introduction and go :doc:`/tutorials` for "
#~ "a simple tutorial. For more "
#~ "documentation about Abaqus/Python scripting, "
#~ "please check :doc:`/references` for more "
#~ "detailed API references."
#~ msgstr ""

