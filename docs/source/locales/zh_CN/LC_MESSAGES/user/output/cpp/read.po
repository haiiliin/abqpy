# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, WANG Hailin
# This file is distributed under the same license as the abqpy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abqpy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-30 00:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../user/output/cpp/read.md:1
msgid "Reading from an output database"
msgstr ""

#: ../../user/output/cpp/read.md:3
msgid ""
"The following sections describe how you use Abaqus C++ API commands to "
"read data from an output database."
msgstr ""

#: ../../user/output/cpp/read.md:5
msgid "The Abaqus/CAE Visualization module tutorial output database"
msgstr ""

#: ../../user/output/cpp/read.md:7
msgid ""
"The following sections describe how you can access the data in an output "
"database. Examples are included that refer to the Abaqus/CAE "
"Visualization module tutorial output database, `viewer_tutorial.odb`. "
"This database is generated by the input file from Case 2 of the example "
"problem, [Indentation of an elastomeric foam specimen with a "
"hemispherical "
"punch](https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXARefMap/simaexa-c-indentfoamhemipunch.htm?contextscope=all)."
" The problem studies the behavior of a soft elastomeric foam block "
"indented by a heavy metal punch. The tutorial shows how you can use the "
"Visualization module to view the data in the output database. The "
"tutorial describes how you can choose the variable to display, how you "
"can step through the steps and frames in the analysis, and how you can "
"create **X - Y** data from history output."
msgstr ""

#: ../../user/output/cpp/read.md:9
msgid ""
"You are encouraged to copy the tutorial output database to a local "
"directory and experiment with the Abaqus C++ API. The output database and"
" the example scripts from this guide can be copied to the user's working "
"directory using the **abaqus fetch** utility:"
msgstr ""

#: ../../user/output/cpp/read.md:15
msgid ""
"where **name.C** is the name of the program or **name.odb** is the name "
"of the output database (see [Fetching sample input "
"files](https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXCRefMap/simaexc-c-fetchproc.htm?contextscope=all))."
" For example, use the following command to retrieve the tutorial output "
"database:"
msgstr ""

#: ../../user/output/cpp/read.md:21
msgid "Making the Odb commands available"
msgstr ""

#: ../../user/output/cpp/read.md:23
msgid ""
"To make the Odb commands available to your program, you first need to "
"include the output database interface classes using the following "
"statement:"
msgstr ""

#: ../../user/output/cpp/read.md:29
msgid ""
"To make the material and section Odb commands available to your program, "
"you also need to include their output database classes:"
msgstr ""

#: ../../user/output/cpp/read.md:36
msgid "Opening an output database"
msgstr ""

#: ../../user/output/cpp/read.md:38
msgid ""
"You use the `openOdb` method to open an existing output database. For "
"example, the following statement opens the output database used by the "
"Abaqus/CAE Visualization module tutorial:"
msgstr ""

#: ../../user/output/cpp/read.md:44
msgid ""
"After you open the output database, you can access its contents using the"
" methods and members of the Odb object returned by the `openOdb` method. "
"In the above example the Odb object is referred to by the variable `odb`."
" For a full description of the `openOdb` command, see "
"{func}`~odbAccess.openOdb`."
msgstr ""

#: ../../user/output/cpp/read.md:46
msgid ""
"The following list describes the objects in model data and the commands "
"you use to read model data. Many of the objects are repositories, and you"
" will find it useful to use the repository iterators to determine the "
"keys of the repositories. For more information on repositories and "
"sequences, see {doc}`utility`."
msgstr ""

#: ../../user/output/cpp/read.md:48
msgid "**The root assembly**"
msgstr ""

#: ../../user/output/cpp/read.md:50
msgid ""
"An output database contains only one root assembly. You access the root "
"assembly through the OdbAssembly object."
msgstr ""

#: ../../user/output/cpp/read.md:56
msgid "**Part instances**"
msgstr ""

#: ../../user/output/cpp/read.md:58
msgid ""
"Part instances are stored in the instance repository under the "
"OdbAssembly object. The following statements display the repository keys "
"of the part instances in the tutorial output database:"
msgstr ""

#: ../../user/output/cpp/read.md:66
msgid ""
"The output database contains only one part instance, and the resulting "
"output is"
msgstr ""

#: ../../user/output/cpp/read.md:72
msgid ""
"From a part instance or part you can retrieve the node and element "
"information as follows:"
msgstr ""

#: ../../user/output/cpp/read.md:123
msgid "**Regions**"
msgstr ""

#: ../../user/output/cpp/read.md:125
msgid ""
"Regions in the output database are OdbSet objects. Regions refer to the "
"part and assembly sets stored in the output database. A part set refers "
"to elements or nodes in an individual part and appears in each instance "
"of the part in the assembly. An assembly set refers to the elements or "
"nodes in part instances in the assembly. A region can be one of the "
"following:"
msgstr ""

#: ../../user/output/cpp/read.md:127
msgid "A node set"
msgstr ""

#: ../../user/output/cpp/read.md:128
msgid "An element set"
msgstr ""

#: ../../user/output/cpp/read.md:129
msgid "A surface"
msgstr ""

#: ../../user/output/cpp/read.md:131
msgid ""
"For example, the following statement displays the node sets in the "
"OdbAssembly object:"
msgstr ""

#: ../../user/output/cpp/read.md:140 ../../user/output/cpp/read.md:167
#: ../../user/output/cpp/read.md:437 ../../user/output/cpp/read.md:530
#: ../../user/output/cpp/read.md:642 ../../user/output/cpp/read.md:845
msgid "The resulting output is"
msgstr ""

#: ../../user/output/cpp/read.md:147
msgid ""
"The following statements display the node sets and the element sets in "
"the PART-1-1 part instance:"
msgstr ""

#: ../../user/output/cpp/read.md:182
msgid ""
"The following statement assigns a variable (topNodeSet) to the 'TOP' node"
" set in the PART-1-1 part instance:"
msgstr ""

#: ../../user/output/cpp/read.md:191
msgid ""
"The type of the object to which topNodeSet refers is OdbSet. After you "
"create a variable that refers to a region, you can use the variable to "
"refer to a subset of field output data, as described in [Using regions to"
" read a subset of field output "
"data](https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAECMDRefMap/simacmd-c-odbintroreadregcpp.htm?contextscope=all)."
msgstr ""

#: ../../user/output/cpp/read.md:193
msgid "To access the set information on a part instance:"
msgstr ""

#: ../../user/output/cpp/read.md:223
msgid ""
"The set information in an assembly set is keyed by instance name and can "
"be accessed using the following:"
msgstr ""

#: ../../user/output/cpp/read.md:240
msgid "**Materials**"
msgstr ""

#: ../../user/output/cpp/read.md:242
msgid "You can read material data from an output database."
msgstr ""

#: ../../user/output/cpp/read.md:244
msgid "Materials are stored in the materials repository under the Odb object."
msgstr ""

#: ../../user/output/cpp/read.md:246
msgid ""
"Extend the Material commands available to the Odb object using the "
"following statement:"
msgstr ""

#: ../../user/output/cpp/read.md:253
msgid "Access the materials repository using the command:"
msgstr ""

#: ../../user/output/cpp/read.md:263
msgid "To print isotropic elastic material properties in a material object:"
msgstr ""

#: ../../user/output/cpp/read.md:289
msgid ""
"Some Material definitions have suboptions. For example, to access the "
"smoothing type used for biaxial test data specified for a hyperelastic "
"material:"
msgstr ""

#: ../../user/output/cpp/read.md:322
msgid ""
"{doc}`/reference/mdb/model/material` describes the Material object "
"commands in more detail; the odb_Union object is defined in [Union "
"object](https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-infunioncpp.htm?contextscope=all)."
msgstr ""

#: ../../user/output/cpp/read.md:324
msgid "**Sections**"
msgstr ""

#: ../../user/output/cpp/read.md:326
msgid "You can read section data from an output database."
msgstr ""

#: ../../user/output/cpp/read.md:328
msgid "Sections are stored in the sections repository under the Odb object."
msgstr ""

#: ../../user/output/cpp/read.md:330
msgid ""
"Extend the Section commands available to the Odb object using the "
"following statement:"
msgstr ""

#: ../../user/output/cpp/read.md:337
msgid ""
"The following statements display the repository keys of the sections in "
"an output database:"
msgstr ""

#: ../../user/output/cpp/read.md:348
msgid ""
"The Section object can be one of the various section types. The odb_isA "
"method can be used to determine the section type. For example, to "
"determine whether a section is of type homogeneous solid section and to "
"print its thickness and associated material name:"
msgstr ""

#: ../../user/output/cpp/read.md:366
msgid "Similarily, to access the beam profile repository:"
msgstr ""

#: ../../user/output/cpp/read.md:376
msgid ""
"The Profile object can be one of the various profile types. The odb_isA "
"method can be used to determine the profile type. For example, to output "
"the radius of all circular profiles in the odb:"
msgstr ""

#: ../../user/output/cpp/read.md:391
msgid "**Section assignments**"
msgstr ""

#: ../../user/output/cpp/read.md:393
msgid ""
"Section assignments are stored in the sectionAssignments repository under"
" the OdbAssembly object."
msgstr ""

#: ../../user/output/cpp/read.md:395
msgid ""
"All elements in an Abaqus analysis need to be associated with section and"
" material properties. Section assignments provide the relationship "
"between elements in a part instance and their section properties. The "
"section properties include the associated material name. To access the "
"sectionAssignments repository from the PartInstance object:"
msgstr ""

#: ../../user/output/cpp/read.md:422
msgid "Reading results data"
msgstr ""

#: ../../user/output/cpp/read.md:424
msgid ""
"The following list describes the objects in results data and the commands"
" you use to read results data. As with model data you will find it useful"
" to use the repository iterators to determine the keys of the results "
"data repositories."
msgstr ""

#: ../../user/output/cpp/read.md:426
msgid "**Steps**"
msgstr ""

#: ../../user/output/cpp/read.md:428
msgid ""
"Steps are stored in the steps repository under the Odb object. The key to"
" the steps repository is the name of the step. The following statements "
"print out the keys of each step in the repository:"
msgstr ""

#: ../../user/output/cpp/read.md:445
msgid "**Frames**"
msgstr ""

#: ../../user/output/cpp/read.md:447
msgid ""
"Each step contains a sequence of frames, where each increment of the "
"analysis (or each mode in an eigenvalue analysis) that resulted in output"
" to the output database is called a frame. The following statement "
"assigns a variable to the last frame in the first step:"
msgstr ""

#: ../../user/output/cpp/read.md:456
msgid "Reading field output data"
msgstr ""

#: ../../user/output/cpp/read.md:458
msgid ""
"Field output data are stored in the fieldOutputs repository under the "
"OdbFrame object. The key to the repository is the name of the variable. "
"The following statements list all the variables found in the last frame "
"of the first step (the statements use the variable `lastFrame` that we "
"defined previously):"
msgstr ""

#: ../../user/output/cpp/read.md:477
msgid ""
"Different variables can be written to the output database at different "
"frequencies. As a result, not all frames will contain all the field "
"output variables. You can use the following to view all the available "
"field data in a frame:"
msgstr ""

#: ../../user/output/cpp/read.md:499
msgid ""
"The resulting print output lists all the field output variables in a "
"particular frame, along with their type and position."
msgstr ""

#: ../../user/output/cpp/read.md:512
msgid ""
"In turn, a FieldOutput object has a method values that returns a "
"reference to a sequence of FieldValue objects that contain data. Each "
"FieldValue object in the sequence corresponds to a particular location in"
" the model. You can obtain the data corresponding to each FieldValue "
"object using the data method, which returns a pointer to an array that "
"contains the results at the current location. For example,"
msgstr ""

#: ../../user/output/cpp/read.md:541
msgid ""
"The data in the FieldValue object depend on the field output variable, "
"which is displacement in the above example. In the example above the "
"field output for displacements was of type NODAL and there is a "
"FieldValue object for the output at each node. In this case the data "
"method returns a pointer to an array containing the displacements at the "
"node. For INTEGRATION_POINT data each integration point in an element "
"will correspond to a different FieldValue object, and the data method "
"will return a pointer to an array containing the element results data at "
"that particular integration point."
msgstr ""

#: ../../user/output/cpp/read.md:544
msgid ""
"Access to field data using the FieldValue object will be deprecated in "
"future releases of the C++ version of the Abaqus Scripting Interface "
"because of the improved performance of the bulk data access method. For "
"more information, see {py:class}`~abaqus.Odb.FieldBulkData.FieldBulkData`"
" object and :[using bulk data access to an output database]."
msgstr ""

#: ../../user/output/cpp/read.md:547
msgid "Using bulk data access to an output database"
msgstr ""

#: ../../user/output/cpp/read.md:549
msgid ""
"If you need to access all the data in a field from an output database, "
"you can use the bulkDataBlocks method of the FieldOutput object to read "
"the data in bulk form. The bulkDataBlocks method returns a reference to a"
" sequence of FieldBulkData objects, each of which contains the entire "
"output for a class of nodes or elements, blocked together into an array."
msgstr ""

#: ../../user/output/cpp/read.md:551
msgid ""
"The data method of the FieldBulkData object returns an array of data "
"corresponding to the output for the entire class of elements or nodes. "
"The length and width methods of theFieldBulkData object return the number"
" of output locations and the number of components at each output "
"location, respectively. For example,"
msgstr ""

#: ../../user/output/cpp/read.md:576
msgid ""
"The `numberOfElements` method returns the number of elements in a block. "
"When you are accessing the results for elements, the `numberOfElements` "
"method is useful in determining the number of output locations per "
"element. For example, when you are accessing element data at integration "
"points, you may need to determine the number of integration points per "
"element. You can determine the number of integration points per element "
"by dividing the length of the block, which is the total number of output "
"locations, by the number of elements in the block. For example,"
msgstr ""

#: ../../user/output/cpp/read.md:615
msgid ""
"For more information, see "
"{py:class}`~abaqus.Odb.FieldBulkData.FieldBulkData` object."
msgstr ""

#: ../../user/output/cpp/read.md:617
msgid ""
"The bulkDataBlocks method is an alternative to the values method of a "
"FieldOutput object, described in [reading field output data]. The "
"`values` method of a FieldOutput object returns a reference to a sequence"
" of FieldValue objects that contain data. Each FieldValue object in the "
"sequence provides data for a unique location in the model."
msgstr ""

#: ../../user/output/cpp/read.md:619
msgid ""
"Performance can be increased with the bulk data interface because the "
"field data stored in a bulk data block are made available in a single "
"array of floating point numbers. If you access the same data in nonbulk "
"form, you must loop over a sequence of FieldValue objects and then access"
" the data for each location separately. Traversing an array can prove to "
"be significantly faster than traversing a sequence of objects and "
"extracting data stored within the objects. As a result, accessing the "
"data in an output database using the bulk data interface can be "
"significantly faster than the nonbulk form."
msgstr ""

#: ../../user/output/cpp/read.md:621
msgid ""
"If you do not need to access large amounts of data, you may get better "
"performance with the nonbulk access method. This is especially true if "
"the number of output locations you are accessing is smaller than the "
"number of elements in a class. Similarly, the nonbulk access method may "
"be faster if the number of nodes you are accessing is smaller than the "
"number of nodes in an instance. The nonbulk access method is also better "
"suited for random access to an output database, where successive output "
"locations to be accessed may lie in completely different blocks."
msgstr ""

#: ../../user/output/cpp/read.md:623
msgid "Using regions to read a subset of field output data"
msgstr ""

#: ../../user/output/cpp/read.md:625
msgid ""
"After you have created an OdbSet object using model data, you can use the"
" getSubset method to read only the data corresponding to that region. "
"Typically, you will be reading data from a region that refers to a node "
"set or an element set. For example, the following statements create a "
"variable called center that refers to the node set PUNCH at the center of"
" the hemispherical punch. In a previous section you created the "
"displacement variable that refers to the displacement of the entire model"
" in the final frame of the first step. Now you use the getSubset command "
"to get the displacement for only the center region."
msgstr ""

#: ../../user/output/cpp/read.md:649
msgid ""
"The arguments to `getSubset` are a region, an element type, a position, "
"or section point data. The following is a second example that uses an "
"element set to define the region and generates formatted output for the "
"stress at integration points for CAX4 elements from the element set "
"\"CENT\":"
msgstr ""

#: ../../user/output/cpp/read.md:695
msgid "Possible values for the enumeration for the position are:"
msgstr ""

#: ../../user/output/cpp/read.md:697
msgid "INTEGRATION_POINT"
msgstr ""

#: ../../user/output/cpp/read.md:698
msgid "NODAL"
msgstr ""

#: ../../user/output/cpp/read.md:699
msgid "ELEMENT_NODAL"
msgstr ""

#: ../../user/output/cpp/read.md:700
msgid "CENTROID"
msgstr ""

#: ../../user/output/cpp/read.md:702
msgid ""
"If the requested field values are not found in the output database at the"
" specified `odb_Enum::ELEMENT_NODAL` or `odb_Enum::CENTROID` positions, "
"they are extrapolated from the field data at the "
"`odb_Enum::INTEGRATION_POINT` position."
msgstr ""

#: ../../user/output/cpp/read.md:704
msgid "Reading history output data"
msgstr ""

#: ../../user/output/cpp/read.md:706
msgid ""
"History output is output defined for a single point or for values "
"calculated for a portion of the model as a whole, such as energy. "
"Depending on the type of output expected, the historyRegions repository "
"contains data from one of the following:"
msgstr ""

#: ../../user/output/cpp/read.md:708
msgid "a node"
msgstr ""

#: ../../user/output/cpp/read.md:709
msgid "an integration point"
msgstr ""

#: ../../user/output/cpp/read.md:710
msgid "a region"
msgstr ""

#: ../../user/output/cpp/read.md:711
msgid "a material point"
msgstr ""

#: ../../user/output/cpp/read.md:714
msgid "History data from an analysis cannot contain multiple points."
msgstr ""

#: ../../user/output/cpp/read.md:717
msgid "The history data object model is shown in {numref}`odb-history-nls-3`."
msgstr ""

#: ../../user/output/cpp/read.md:725
msgid "The history data object model."
msgstr ""

#: ../../user/output/cpp/read.md:728
msgid ""
"In contrast to field output, which is associated with a frame, history "
"output is associated with a step. History output data are stored in the "
"historyRegions repository under an OdbStep object. Abaqus creates keys to"
" the historyRegions repository that describe the region; for example,"
msgstr ""

#: ../../user/output/cpp/read.md:730 ../../user/output/cpp/read.md:752
msgid "`'Node PART-1-1.1000'`"
msgstr ""

#: ../../user/output/cpp/read.md:731
msgid "`'Element PART-1-1.2 Int Point 1'`"
msgstr ""

#: ../../user/output/cpp/read.md:732
msgid "`'Assembly ASSEMBLY'`"
msgstr ""

#: ../../user/output/cpp/read.md:734
msgid ""
"The output from all history requests that relate to a specified point is "
"collected in one HistoryRegion object. A HistoryRegion object contains "
"multiple HistoryOutput objects. Each HistoryOutput object, in turn, "
"contains a sequence of (**frameValue**, **value**) sequences. In a time "
"domain analysis (**domain** = TIME) the sequence is a tuple of "
"(**stepTime**, **value**). In a frequency domain analysis (**domain** = "
"FREQUENCY) the sequence is a tuple of (**frequency**, **value**). In a "
"modal domain analysis (**domain** = MODAL) the sequence is a tuple of "
"(**mode**, **value**)."
msgstr ""

#: ../../user/output/cpp/read.md:736
msgid ""
"In the analysis that generated the Abaqus/CAE Visualization module "
"tutorial output database, the user asked for the following history "
"output:"
msgstr ""

#: ../../user/output/cpp/read.md:738
msgid "**At the rigid body reference point (Node 1000)**"
msgstr ""

#: ../../user/output/cpp/read.md:740
msgid "U"
msgstr ""

#: ../../user/output/cpp/read.md:741
msgid "V"
msgstr ""

#: ../../user/output/cpp/read.md:742
msgid "A"
msgstr ""

#: ../../user/output/cpp/read.md:744
msgid "At the corner element"
msgstr ""

#: ../../user/output/cpp/read.md:746
msgid "MISES"
msgstr ""

#: ../../user/output/cpp/read.md:747
msgid "LE22"
msgstr ""

#: ../../user/output/cpp/read.md:748
msgid "S22"
msgstr ""

#: ../../user/output/cpp/read.md:750
msgid ""
"The history output data can be retrieved from the HistoryRegion objects "
"in the output database. The tutorial output database contains "
"HistoryRegion objects that relate to the rigid body reference point and "
"the integration points of the corner element as follows:"
msgstr ""

#: ../../user/output/cpp/read.md:753
msgid "`'Element PART-1-1.1 Int Point 1'`"
msgstr ""

#: ../../user/output/cpp/read.md:754
msgid "`'Element PART-1-1.1 Int Point 2'`"
msgstr ""

#: ../../user/output/cpp/read.md:755
msgid "`'Element PART-1-1.1 Int Point 3'`"
msgstr ""

#: ../../user/output/cpp/read.md:756
msgid "`'Element PART-1-1.1 Int Point 4'`"
msgstr ""

#: ../../user/output/cpp/read.md:758
msgid ""
"The following statements read the tutorial output database and write the "
"U2 history data from the second step to an ASCII file that can be plotted"
" by Abaqus/CAE:"
msgstr ""

#: ../../user/output/cpp/read.md:781
msgid ""
"The output in this example is a sequence of tuples containing the frame "
"time and the displacement value. The example uses nodal history data "
"output. If the analysis requested history output from an element, the "
"output database would contain one HistoryRegion object and one "
"HistoryPoint object for each integration point."
msgstr ""

#: ../../user/output/cpp/read.md:783
msgid "An example of reading field data from an output database"
msgstr ""

#: ../../user/output/cpp/read.md:785
msgid ""
"The following program illustrates how you read model data and field "
"output data from the output database used by the Abaqus/CAE Visualization"
" module tutorial output database."
msgstr ""

#: ../../user/output/cpp/read.md:787
msgid "Import the required modules:"
msgstr ""

#: ../../user/output/cpp/read.md:794
msgid "Open the output database used by the tutorial."
msgstr ""

#: ../../user/output/cpp/read.md:800
msgid "Create a variable that refers to the last frame of the first step."
msgstr ""

#: ../../user/output/cpp/read.md:809
msgid ""
"Create a variable that refers to the displacement 'U' in the last frame "
"of the first step."
msgstr ""

#: ../../user/output/cpp/read.md:816
msgid ""
"Create a variable that refers to the node set 'PUNCH' in the part "
"instance'PART-1–1' :"
msgstr ""

#: ../../user/output/cpp/read.md:825
msgid ""
"Create a variable that refers to the displacement of the node set in the "
"last frame of the first step:"
msgstr ""

#: ../../user/output/cpp/read.md:832
msgid ""
"Finally, print some field output data from each node in the node set (a "
"single node in this example)."
msgstr ""

#~ msgid ""
#~ ":doc:`reference/mdb/model/material` describes the "
#~ "Material object commands in more detail;"
#~ " the odb_Union object is defined in"
#~ " `Union object "
#~ "<https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-infunioncpp.htm?contextscope=all>`_."
#~ msgstr ""

#~ msgid ""
#~ "Access to field data using the "
#~ "FieldValue object will be deprecated in"
#~ " future releases of the C++ version"
#~ " of the Abaqus Scripting Interface "
#~ "because of the improved performance of"
#~ " the bulk data access method. For "
#~ "more information, see "
#~ ":py:class:`~abaqus.Odb.FieldBulkData.FieldBulkData` object "
#~ "and :doc:`read:using bulk data access to"
#~ " an output database`."
#~ msgstr ""

#~ msgid ""
#~ "The bulkDataBlocks method is an "
#~ "alternative to the values method of "
#~ "a FieldOutput object, described in "
#~ ":doc:`read:reading field output data`. The "
#~ "`values` method of a FieldOutput object"
#~ " returns a reference to a sequence"
#~ " of FieldValue objects that contain "
#~ "data. Each FieldValue object in the "
#~ "sequence provides data for a unique "
#~ "location in the model."
#~ msgstr ""

#~ msgid "The history data object model is shown in :numref:`odb-history-nls`"
#~ msgstr ""

#~ msgid ""
#~ "The following sections describe how you"
#~ " can access the data in an "
#~ "output database. Examples are included "
#~ "that refer to the Abaqus/CAE "
#~ "Visualization module tutorial output database,"
#~ " `viewer_tutorial.odb`. This database is "
#~ "generated by the input file from "
#~ "Case 2 of the example problem, "
#~ "`Indentation of an elastomeric foam "
#~ "specimen with a hemispherical punch "
#~ "<https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXARefMap/simaexa-c-indentfoamhemipunch.htm?contextscope=all>`_."
#~ " The problem studies the behavior of"
#~ " a soft elastomeric foam block "
#~ "indented by a heavy metal punch. "
#~ "The tutorial shows how you can use"
#~ " the Visualization module to view the"
#~ " data in the output database. The "
#~ "tutorial describes how you can choose"
#~ " the variable to display, how you "
#~ "can step through the steps and "
#~ "frames in the analysis, and how "
#~ "you can create **X - Y** data "
#~ "from history output."
#~ msgstr ""

#~ msgid ""
#~ "where **name.C** is the name of "
#~ "the program or **name.odb** is the "
#~ "name of the output database (see "
#~ "`Fetching sample input files "
#~ "<https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXCRefMap/simaexc-c-fetchproc.htm?contextscope=all>`_)."
#~ " For example, use the following "
#~ "command to retrieve the tutorial output"
#~ " database:"
#~ msgstr ""

#~ msgid ""
#~ "After you open the output database, "
#~ "you can access its contents using "
#~ "the methods and members of the Odb"
#~ " object returned by the `openOdb` "
#~ "method. In the above example the "
#~ "Odb object is referred to by the"
#~ " variable `odb`. For a full "
#~ "description of the `openOdb` command, "
#~ "see :func:`~odbAccess.openOdb`."
#~ msgstr ""

#~ msgid ""
#~ "The following list describes the objects"
#~ " in model data and the commands "
#~ "you use to read model data. Many"
#~ " of the objects are repositories, and"
#~ " you will find it useful to use"
#~ " the repository iterators to determine "
#~ "the keys of the repositories. For "
#~ "more information on repositories and "
#~ "sequences, see :doc:`utility`."
#~ msgstr ""

#~ msgid ""
#~ "The type of the object to which"
#~ " topNodeSet refers is OdbSet. After "
#~ "you create a variable that refers "
#~ "to a region, you can use the "
#~ "variable to refer to a subset of"
#~ " field output data, as described in"
#~ " `Using regions to read a subset "
#~ "of field output data "
#~ "<https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAECMDRefMap/simacmd-c-odbintroreadregcpp.htm?contextscope=all>`_."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`/reference/mdb/model/material` describes the "
#~ "Material object commands in more detail;"
#~ " the odb_Union object is defined in"
#~ " `Union object "
#~ "<https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-infunioncpp.htm?contextscope=all>`_."
#~ msgstr ""

#~ msgid ""
#~ "Access to field data using the "
#~ "FieldValue object will be deprecated in"
#~ " future releases of the C++ version"
#~ " of the Abaqus Scripting Interface "
#~ "because of the improved performance of"
#~ " the bulk data access method. For "
#~ "more information, see "
#~ ":py:class:`~abaqus.Odb.FieldBulkData.FieldBulkData` object "
#~ "and :`using bulk data access to an"
#~ " output database`_."
#~ msgstr ""

#~ msgid ""
#~ "For more information, see "
#~ ":py:class:`~abaqus.Odb.FieldBulkData.FieldBulkData` object."
#~ msgstr ""

#~ msgid ""
#~ "The bulkDataBlocks method is an "
#~ "alternative to the values method of "
#~ "a FieldOutput object, described in "
#~ "`reading field output data`_. The "
#~ "`values` method of a FieldOutput object"
#~ " returns a reference to a sequence"
#~ " of FieldValue objects that contain "
#~ "data. Each FieldValue object in the "
#~ "sequence provides data for a unique "
#~ "location in the model."
#~ msgstr ""

#~ msgid "The history data object model is shown in :numref:`odb-history-nls-3`."
#~ msgstr ""

