# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, WANG Hailin
# This file is distributed under the same license as the abqpy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abqpy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-30 00:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../user/output/cpp/output-object-model.md:1
msgid "Object model for the output database"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:3
msgid ""
"An output database generated from an Abaqus analysis contains both model "
"and results data. The output database object model is shown in {numref"
"}`odb-model-nls`"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:5
msgid "**Model data**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:7
msgid ""
"Model data describe the parts and part instances that make up the root "
"assembly; for example, nodal coordinates, set definitions, and element "
"types."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:9
msgid "**Results data**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:11
msgid ""
"Results data describe the results of your analysis; for example, "
"stresses, strains, and displacements. You use output requests to "
"configure the contents of the results data. Results data can be either "
"field output data or history output data."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:14
msgid ""
"For a description of object models, see {doc}`/user/python/use-scripts"
"/object-model`."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:17
msgid ""
"You can find more information on the format of the output database in "
"[Output to the Output "
"Database](https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEOUTRefMap/simaout-m"
"-dboutput-sb.htm?contextscope=all#simaout-m-dboutput-sb)."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:19
msgid "Model data"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:21
msgid ""
"Model data define the model used in the analysis; for example, the parts,"
" materials, initial and boundary conditions, and physical constants. More"
" information about model data can be found in The {doc}`/user/python/use-"
"scripts/object-model` and [Assembly "
"definition](https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEMODRefMap/simamod-c-partassy.htm?contextscope=all)."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:23
msgid ""
"Abaqus does not write all the model data to the output database; for "
"example, you cannot access loads, and only certain interactions are "
"available. Model data that are stored in the output database include "
"parts, the root assembly, part instances, regions, materials, sections, "
"section assignments, and section categories, each of which is stored as "
"an Abaqus Scripting Interface object. These components of model data are "
"described below."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:25
msgid "**Parts**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:27
msgid ""
"A part in the output database is a finite element idealization of an "
"object. Parts are the building blocks of an assembly and can be either "
"rigid or deformable. Parts are reusable; they can be instanced multiple "
"times in the assembly. Parts are not analyzed directly; a part is like a "
"blueprint for its instances. A part is stored in an output database as a "
"collection of nodes, elements, surfaces, and sets."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:29
msgid "**The root assembly**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:31
msgid ""
"The root assembly is a collection of positioned part instances. An "
"analysis is conducted by defining boundary conditions, constraints, "
"interactions, and a loading history for the root assembly. The output "
"database object model contains only one root assembly."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:33
msgid "**Part instances**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:35
msgid ""
"A part instance is a usage of a part within the assembly. All "
"characteristics (such as mesh and section definitions) defined for a part"
" become characteristics for each instance of that partâ€”they are inherited"
" by the part instances. Each part instance is positioned independently "
"within the root assembly."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:37
msgid "**Materials**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:39
msgid ""
"Materials contain material models comprised of one or more material "
"property definitions. The same material models may be used repeatedly "
"within a model; each component that uses the same material model shares "
"identical material properties. Many materials may exist within a model "
"database, but only the materials that are used in the assembly are copied"
" to the output database."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:41
msgid "**Sections**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:43
msgid ""
"Sections add the properties that are necessary to define completely the "
"geometric and material properties of an element. Various element types "
"require different section types to complete their definitions. For "
"example, shell elements in a composite part require a section that "
"provides a thickness, multiple material models, and an orientation for "
"each material model; all these pieces combine to complete the composite "
"shell element definition. Like materials, only those sections that are "
"used in the assembly are copied to the output database."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:45
msgid "**Section assignments**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:47
msgid ""
"Section assignments link section definitions to the regions of part "
"instances. Section assignments in the output database maintain this "
"association. Sections are assigned to each part in a model, and the "
"section assignments are propagated to each instance of that part."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:49
msgid "**Section categories**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:51
msgid ""
"You use section categories to group the regions of the model that use the"
" same section definitions; for example, the regions that use a shell "
"section with five section points. Within a section category, you use the "
"section points to identify the location of results; for example, you can "
"associate section point 1 with the top surface of a shell and section "
"point 5 with the bottom surface."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:53
msgid "**Analytical rigid surface**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:55
msgid ""
"Analytical rigid surfaces are geometric surfaces with profiles that can "
"be described with straight and curved line segments. Using analytical "
"rigid surfaces offers important advantages in contact modeling."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:57
msgid "**Rigid bodies**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:59
msgid ""
"You use rigid bodies to define a collection of nodes, elements, and/or "
"surfaces whose motion is governed by the motion of a single node, called "
"the rigid body reference node."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:61
msgid "**Pretension Sections**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:63
msgid ""
"Pretension sections are used to associate a pre-tension node with a pre-"
"tension section. The pre-tension section can be defined using a surface "
"for continuum elements or using an element for truss or beam elements."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:65
msgid "**Interactions**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:67
msgid ""
"Interactions are used to define contact between surfaces in an analysis. "
"Only contact interactions defined using contact pairs are written to the "
"output database."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:69
msgid "**Interaction properties**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:71
msgid ""
"Interaction properties define the physical behavior of surfaces involved "
"in an interaction. Only tangential friction behavior is written to the "
"output database."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:73
msgid "{numref}`odb-model-nls-cpp` shows the model data object model."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:81
msgid "The model data object model."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:84
msgid "Results data"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:86
msgid ""
"Results data describe the results of your analysis. Abaqus organizes the "
"analysis results in an output database into the following components:"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:88
msgid "**Steps**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:90
msgid ""
"An Abaqus analysis contains a sequence of one or more analysis steps. "
"Each step is associated with an analysis procedure."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:92
msgid "**Frames**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:94
msgid ""
"Each step contains a sequence of frames, where each increment of the "
"analysis that resulted in output to the output database is called a "
"frame. In a frequency or buckling analysis each eigenmode is stored as a "
"separate frame. Similarly, in a steady-state harmonic response analysis "
"each frequency is stored as a separate frame."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:96
msgid "**Field output**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:98
msgid ""
"Field output is intended for infrequent requests for a large portion of "
"the model and can be used to generate contour plots, animations, symbol "
"plots, and displaced shape plots in the Visualization module of "
"Abaqus/CAE. You can also use field output to generate an **X - Y** data "
"plot. Only complete sets of basic variables (for example, all the stress "
"or strain components) can be requested as field output. Field output is "
"composed of a cloud of data values (e.g., stress tensors at each "
"integration point for all elements). Each data value has a location, "
"type, and value. You use the regions defined in the model data, such as "
"an element set, to access subsets of the field output data. {numref}`odb-"
"field-nls-1` shows the field output data object model within an output "
"database."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:106
msgid "The field output data object model."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:109
msgid "**History output**"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:111
msgid ""
"History output is output defined for a single point or for values "
"calculated for a portion of the model as a whole, such as energy. History"
" output is intended for relatively frequent output requests for small "
"portions of the model and can be displayed in the form of **X - Y** data "
"plots in the Visualization module of Abaqus/CAE. Individual variables "
"(such as a particular stress component) can be requested."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:113
msgid ""
"Depending on the type of output expected, a HistoryRegion object can be "
"defined for one of the following:"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:115
msgid "a node"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:116
msgid "an integration point"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:117
msgid "a region"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:118
msgid "the whole model"
msgstr ""

#: ../../user/output/cpp/output-object-model.md:120
msgid ""
"The output from all history requests that relate to a particular point or"
" region is then collected in one HistoryRegion object. {numref}`odb-"
"history-nls-2` shows the history output data object model within an "
"output database."
msgstr ""

#: ../../user/output/cpp/output-object-model.md:128
msgid "The history output data."
msgstr ""

#~ msgid ""
#~ "For a description of object models, "
#~ "see :doc:`user/python/use-scripts/object-model`."
#~ msgstr ""

#~ msgid ""
#~ "Model data define the model used "
#~ "in the analysis; for example, the "
#~ "parts, materials, initial and boundary "
#~ "conditions, and physical constants. More "
#~ "information about model data can be "
#~ "found in The :doc:`user/python/use-scripts"
#~ "/object-model` and `Assembly definition "
#~ "<https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEMODRefMap/simamod-c-partassy.htm?contextscope=all>`_."
#~ msgstr ""

#~ msgid ":numref:`odb-model-nls` shows the model data object model."
#~ msgstr ""

#~ msgid ""
#~ "Field output is intended for infrequent"
#~ " requests for a large portion of "
#~ "the model and can be used to "
#~ "generate contour plots, animations, symbol "
#~ "plots, and displaced shape plots in "
#~ "the Visualization module of Abaqus/CAE. "
#~ "You can also use field output to"
#~ " generate an **X - Y** data "
#~ "plot. Only complete sets of basic "
#~ "variables (for example, all the stress"
#~ " or strain components) can be "
#~ "requested as field output. Field output"
#~ " is composed of a cloud of data"
#~ " values (e.g., stress tensors at each"
#~ " integration point for all elements). "
#~ "Each data value has a location, "
#~ "type, and value. You use the "
#~ "regions defined in the model data, "
#~ "such as an element set, to access"
#~ " subsets of the field output data."
#~ " :numref:`odb-field-nls` shows the "
#~ "field output data object model within"
#~ " an output database."
#~ msgstr ""

#~ msgid ""
#~ "The output from all history requests "
#~ "that relate to a particular point "
#~ "or region is then collected in one"
#~ " HistoryRegion object. :numref:`odb-history-"
#~ "nls` shows the history output data "
#~ "object model within an output database."
#~ msgstr ""

#~ msgid ""
#~ "An output database generated from an "
#~ "Abaqus analysis contains both model and"
#~ " results data. The output database "
#~ "object model is shown in :numref"
#~ ":`odb-model-nls`"
#~ msgstr ""

#~ msgid ""
#~ "For a description of object models, "
#~ "see :doc:`/user/python/use-scripts/object-model`."
#~ msgstr ""

#~ msgid ""
#~ "You can find more information on "
#~ "the format of the output database "
#~ "in `Output to the Output Database "
#~ "<https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEOUTRefMap/simaout-m"
#~ "-dboutput-sb.htm?contextscope=all#simaout-m-dboutput-sb>`_."
#~ msgstr ""

#~ msgid ""
#~ "Model data define the model used "
#~ "in the analysis; for example, the "
#~ "parts, materials, initial and boundary "
#~ "conditions, and physical constants. More "
#~ "information about model data can be "
#~ "found in The :doc:`/user/python/use-scripts"
#~ "/object-model` and `Assembly definition "
#~ "<https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEMODRefMap/simamod-c-partassy.htm?contextscope=all>`_."
#~ msgstr ""

#~ msgid ":numref:`odb-model-nls-cpp` shows the model data object model."
#~ msgstr ""

#~ msgid ""
#~ "Field output is intended for infrequent"
#~ " requests for a large portion of "
#~ "the model and can be used to "
#~ "generate contour plots, animations, symbol "
#~ "plots, and displaced shape plots in "
#~ "the Visualization module of Abaqus/CAE. "
#~ "You can also use field output to"
#~ " generate an **X - Y** data "
#~ "plot. Only complete sets of basic "
#~ "variables (for example, all the stress"
#~ " or strain components) can be "
#~ "requested as field output. Field output"
#~ " is composed of a cloud of data"
#~ " values (e.g., stress tensors at each"
#~ " integration point for all elements). "
#~ "Each data value has a location, "
#~ "type, and value. You use the "
#~ "regions defined in the model data, "
#~ "such as an element set, to access"
#~ " subsets of the field output data."
#~ " :numref:`odb-field-nls-1` shows the "
#~ "field output data object model within"
#~ " an output database."
#~ msgstr ""

#~ msgid ""
#~ "The output from all history requests "
#~ "that relate to a particular point "
#~ "or region is then collected in one"
#~ " HistoryRegion object. :numref:`odb-history-"
#~ "nls-2` shows the history output data "
#~ "object model within an output database."
#~ msgstr ""

