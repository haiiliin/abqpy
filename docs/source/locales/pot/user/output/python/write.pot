# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, WANG Hailin
# This file is distributed under the same license as the abqpy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abqpy 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-30 00:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../user/output/python/write.md:1
msgid "Writing to an output database"
msgstr ""

#: ../../user/output/python/write.md:3
msgid "You can write your own data to an output database, and you can use Abaqus/CAE to view the data. Writing to an output database is very similar to reading from an output database. When you open an existing database, the Odb object contains all the objects found in the output database, such as instances, steps, and field output data. In contrast, when you are writing to a new output database, these objects do not exist. As a result you must use a constructor to create the objects. For example, you use the Part constructor to create a Part object, the Instance constructor to create an OdbInstance object, and the Step constructor to create an OdbStep object."
msgstr ""

#: ../../user/output/python/write.md:5
msgid "After you create an object, you use methods of the objects to enter or modify the data associated with the object. For example, if you are creating an output database, you first create an Odb object. You then use the Part constructor to create a part. After creating the part, you use the addNodes and addElements methods of the Part object to add nodes and elements, respectively. Similarly, you use the addData method of the FieldOutput object to add field output data to the output database. After creating an output database, you should use the save method on the Odb object to save the output database."
msgstr ""

#: ../../user/output/python/write.md:7
msgid "The example script in {ref}`creating-an-output-database` also illustrates how you can write to an output database."
msgstr ""

#: ../../user/output/python/write.md:9
msgid "Creating a new output database"
msgstr ""

#: ../../user/output/python/write.md:11
msgid "You use the Odb constructor to create a new, empty Odb object."
msgstr ""

#: ../../user/output/python/write.md:20
msgid "For a full description of the Odb command, see {py:class}`~abaqus.Odb.Odb.Odb` object. Abaqus creates the RootAssembly object when you create or open an output database."
msgstr ""

#: ../../user/output/python/write.md:22
msgid "You use the `save` method to `save` the output database."
msgstr ""

#: ../../user/output/python/write.md:28
msgid "For a full description of the save command, see {py:meth}`~abaqus.Odb.OdbBase.OdbBase.save`."
msgstr ""

#: ../../user/output/python/write.md:30
msgid "Writing model data"
msgstr ""

#: ../../user/output/python/write.md:32
msgid "To define the geometry of your model, you first create the parts that are used by the model and then you add nodes and elements to the parts. You then define the assembly by creating instances of the parts. If the output database already contains results data, you should not change the geometry of the model. This is to ensure that the results remain synchronized with the model."
msgstr ""

#: ../../user/output/python/write.md:34
msgid "**Part**"
msgstr ""

#: ../../user/output/python/write.md:36
msgid "If the part was created by Abaqus/CAE, the description of the native Abaqus/CAE geometry is stored in the model database, but it is not stored in the output database. A part is stored in an output database as a collection of nodes, elements, surfaces, and sets. You use the Part constructor to add a part to the Odb object. You can specify the type of the part; however, only DEFORMABLE_BODY is currently supported. For example,\\`"
msgstr ""

#: ../../user/output/python/write.md:43
msgid "For a full description of the Part constructor, see {py:class}`~abaqus.Odb.OdbPart.OdbPart`. The new Part object is empty and does not contain geometry. After you create the Part object, you add nodes and elements."
msgstr ""

#: ../../user/output/python/write.md:45
msgid "You use the addNodes method to add nodes by defining node labels and coordinates. You can also define an optional node set. For example,"
msgstr ""

#: ../../user/output/python/write.md:54
msgid "For a full description of the addNodes command, see {py:meth}`~abaqus.Odb.OdbPart.OdbPart.addNodes`. After you have created nodes, you can use the NodeSetFromNodeLabels constructor to create a node set from the node labels. For more information, see {py:meth}`~abaqus.Odb.OdbPart.OdbPart.NodeSetFromNodeLabels`. Similarly, you use the addElements method to add elements to the part using a sequence of element labels, element connectivity, and element type. You can also define an optional element set and an optional section category. For example,"
msgstr ""

#: ../../user/output/python/write.md:75
msgid "For a full description of the addElements command, see {py:meth}`~abaqus.Odb.OdbPart.OdbPart.addElements`."
msgstr ""

#: ../../user/output/python/write.md:77
msgid "**The RootAssembly object**"
msgstr ""

#: ../../user/output/python/write.md:79
msgid "The root assembly is created when you create the output database. You access the RootAssembly object using the same syntax as that used for reading from an output database."
msgstr ""

#: ../../user/output/python/write.md:85
msgid "You can create both instances and regions on the RootAssembly object."
msgstr ""

#: ../../user/output/python/write.md:87
msgid "**Part instances**"
msgstr ""

#: ../../user/output/python/write.md:89
msgid "You use the Instance constructor to create part instances of the parts you have already defined using the Part constructor. For example,"
msgstr ""

#: ../../user/output/python/write.md:96
msgid "You can also supply an optional local coordinate system that specifies the rotation and translation of the part instance. You can add nodes and elements only to a part; you cannot add elements and nodes to a part instance. As a result, you should create the nodes and elements that define the geometry of a part before you instance the part. For a full description of the Instance command, see {py:class}`~abaqus.Odb.OdbInstance.OdbInstance`."
msgstr ""

#: ../../user/output/python/write.md:98
msgid "**Regions**"
msgstr ""

#: ../../user/output/python/write.md:100
msgid "Region commands are used to create sets from element labels, node labels, and element faces. You can create a set on a part, part instance, or the root assembly. Node and element labels are unique within an instance but not within the assembly. As a result, a set on the root assembly requires the names of the part instances associated with the nodes and elements. You can also use region commands to create surfaces. For example,"
msgstr ""

#: ../../user/output/python/write.md:114
msgid "The region commands are described in {doc}`/reference/mdb/model/part_assembly/region`."
msgstr ""

#: ../../user/output/python/write.md:116
msgid "**Materials**"
msgstr ""

#: ../../user/output/python/write.md:118
msgid "You use the Material object to list material properties.Materials are stored in the materials repository under the Odb object.To create an isotropic elastic material, with a Young's modulus of 12000.0 and an effective Poisson's ratio of 0.3 in the output database:"
msgstr ""

#: ../../user/output/python/write.md:126
msgid "For more information, see {doc}`/reference/mdb/model/material`."
msgstr ""

#: ../../user/output/python/write.md:128
msgid "**Sections**"
msgstr ""

#: ../../user/output/python/write.md:130
msgid "You use the Section object to create sections and profiles.Sections are stored in the sections repository under the Odb object.The following code creates a homogeneous solid section object. A Material object must be present before creating a Section object. An exception is thrown if the material does not exist."
msgstr ""

#: ../../user/output/python/write.md:140
msgid "To create a circular beam profile object in the output database:"
msgstr ""

#: ../../user/output/python/write.md:148
msgid "**Section assignments**"
msgstr ""

#: ../../user/output/python/write.md:150
msgid "You use the SectionAssignment object to assign sections and their associated material properties to regions of the model. SectionAssignment objects are members of the Odb object. For a full description of the assignSection method, see {py:meth}`~abaqus.Odb.OdbInstance.OdbInstance.assignSection`."
msgstr ""

#: ../../user/output/python/write.md:152
msgid "All Elements in an Abaqus analysis need to be associated with section and material properties. Section assignments provide the relationship between elements in an Instance object and their section properties. The section properties include the associated material name. To create an element set and assign a section:"
msgstr ""

#: ../../user/output/python/write.md:161
msgid "Writing results data"
msgstr ""

#: ../../user/output/python/write.md:163
msgid "To write results data to the output database, you first create the Step objects that correspond to each step of the analysis. If you are writing field output data, you also create the Frame objects that will contain the field data. History output data are associated with Step objects."
msgstr ""

#: ../../user/output/python/write.md:165
msgid "**Steps**"
msgstr ""

#: ../../user/output/python/write.md:167
msgid "You use the Step constructor to create a results step for time, frequency, or modal domain results. For example,"
msgstr ""

#: ../../user/output/python/write.md:174
msgid "The `Step` constructor has an optional previousStepName argument that specifies the step after which this step must be inserted in the steps repository. For a full description of the Step command, see {py:class}`~abaqus.Step.Step.Step`."
msgstr ""

#: ../../user/output/python/write.md:176
msgid "**Frames**"
msgstr ""

#: ../../user/output/python/write.md:178
msgid "You use the Frame constructor to create a frame for field output. For example,"
msgstr ""

#: ../../user/output/python/write.md:185
msgid "For a full description of the Frame command, see {py:class}`~abaqus.Odb.OdbFrame.OdbFrame`."
msgstr ""

#: ../../user/output/python/write.md:187
msgid "Writing field output data"
msgstr ""

#: ../../user/output/python/write.md:189
msgid "A FieldOutput object contains a cloud of data values (e.g., stress tensors at each integration point for all elements). Each data value has a location, type, and value. You add field output data to a Frame object by first creating a FieldOutput object using the FieldOutput constructor and then adding data to the FieldOutput object using the `addData` method. For example,"
msgstr ""

#: ../../user/output/python/write.md:228
msgid "For a full description of the FieldOutput constructor, see {py:class}`~abaqus.Odb.FieldOutput.FieldOutput`."
msgstr ""

#: ../../user/output/python/write.md:230
msgid "Default display properties"
msgstr ""

#: ../../user/output/python/write.md:232
msgid "The previous examples show how you can use commands to set the default field variable and deformed field variable. Abaqus/CAE uses the default field variable setting to determine the variable to display in a contour plot; for example, stress. Similarly, the default deformed field variable determines the variable that distinguishes a deformed plot from an undeformed plot. Typically, you will use displacement for the default deformed field variable; you cannot specify an invariant or a component. The default variable settings apply for each frame in the step. For example, the following statements use the deformation 'U' as the default setting for both field variable and deformed field variable settings during a particular step:"
msgstr ""

#: ../../user/output/python/write.md:240
msgid "You can set a different default field variable and deformed field variable for different steps. You will need to use a loop to set the defaults for each step. For example,"
msgstr ""

#: ../../user/output/python/write.md:247
msgid "Writing history output data"
msgstr ""

#: ../../user/output/python/write.md:249
msgid "History output is output defined for a single point or for values calculated for a portion of the model as a whole, such as energy. Depending on the type of output expected, the historyRegions repository contains data from one of the following:"
msgstr ""

#: ../../user/output/python/write.md:251
msgid "a node"
msgstr ""

#: ../../user/output/python/write.md:252
msgid "an element, or a location in an element"
msgstr ""

#: ../../user/output/python/write.md:253
msgid "a region"
msgstr ""

#: ../../user/output/python/write.md:256
msgid "History data from an analysis cannot contain multiple points."
msgstr ""

#: ../../user/output/python/write.md:259
msgid "The output from all history requests that relate to a specified point is collected in one HistoryRegion object. You use the HistoryPoint constructor to create the point. For example,"
msgstr ""

#: ../../user/output/python/write.md:265
msgid "For a full description of the HistoryPoint command, see {py:class}`~abaqus.Odb.HistoryPoint.HistoryPoint`."
msgstr ""

#: ../../user/output/python/write.md:267
msgid "You then use the HistoryRegion constructor to create a HistoryRegion object:"
msgstr ""

#: ../../user/output/python/write.md:276
msgid "For a full description of the HistoryRegion command, see {py:class}`~abaqus.Odb.HistoryRegion.HistoryRegion`."
msgstr ""

#: ../../user/output/python/write.md:278
msgid "You use the HistoryOutput constructor to add variables to the HistoryRegion object."
msgstr ""

#: ../../user/output/python/write.md:299
msgid "Each HistoryOutput object contains a sequence of (**frameValue**, **value**) sequences. The HistoryOutput object has a method (addData) for adding data. Each data item is a sequence of (**frameValue**, **value**). In a time domain analysis (**domain** = TIME) the sequence is (**stepTime**, **value**). In a frequency domain analysis (**domain** = FREQUENCY) the sequence is (**frequency**, **value**). In a modal domain analysis (**domain** = MODAL) the sequence is (**mode**, **value**)."
msgstr ""

#: ../../user/output/python/write.md:301
msgid "You add the data values as time and data tuples. The number of data items must correspond to the number of time items. For example,"
msgstr ""
