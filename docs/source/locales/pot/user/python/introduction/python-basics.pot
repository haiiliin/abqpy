# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, WANG Hailin
# This file is distributed under the same license as the abqpy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abqpy 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-01 09:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../user/python/introduction/python-basics.rst:3
msgid "The basics of Python"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:5
msgid "The following sections introduce you to the basics of the Python language."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:8
msgid "Variable names and assignment"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:10
msgid "The expression"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:16
msgid "creates a variable called `myName` that refers to a String object."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:18
msgid "To see the value of a variable or expression, simply type the variable name or the expression at the Python prompt, and press **Enter**. For example,"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:31
msgid "Python creates a variable when you assign a value to it. Python provides several forms of the assignment statement; for example,"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:39
msgid "The second line assigns the string 'Einstein' to the variable myName and assigns the string 'Newton' to the variable yourName. The third line assigns the string 'Einstein' to both myName and yourName."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:41
msgid "The following naming rules apply:"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:43
msgid "Variable names must start with a letter or an underscore character and can contain any number of letters, digits, or underscores. load_3 and _frictionStep are legal variable names; 3load, load_3$, and $frictionStep are not legal names. There is no limit on the length of a variable name."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:44
msgid "Some words are reserved and cannot be used to name a variable; for example, print, while, return, and class."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:45
msgid "Python is case sensitive. A variable named Load is different from a variable named load."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:47
msgid "When you assign a variable in a Python program, the variable refers to a Python object, but the variable is not an object itself. For example, the expression numSpokes=3 creates a variable that refers to an integer object; however, numSpokes is not an object. You can change the object to which a variable refers. numSpokes can refer to a real number on one line, an integer on the next line, and a viewport on the next line."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:49
msgid "The first example script in :doc:`/user/about/examples/create-part` created a model using the following statement:"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:55
msgid "The constructor `mdb.Model(name='Model A')` creates an instance of a model, and this instance is a Python object. The object created is `mdb.models['Model A']`, and the variable myModel refers to this object."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:57
msgid "An object always has a type. In our example the type of `mdb.models['Model A']` is Model. An object's type cannot be changed. The type defines the data encapsulated by an object—its members—and the functions that can manipulate those data—its methods. Unlike most programming languages, you do not need to declare the type of a variable before you use it. Python determines the type when the assignment statement is executed. The Abaqus Scripting Interface uses the term object to refer to a specific Abaqus type as well as to an instance of that type; for example, a Model object refers to a Model type and to an instance of a Model type."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:62
msgid "Python data types"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:64
msgid "Python includes the following built-in data types:"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:67
msgid "Integer"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:69
msgid "To create variables called i and j that refer to integer objects, type the following at the Python prompt:"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:76
msgid "An integer is based on a C long and can be compared to a Fortran integer\\*4 or \\*8. For extremely large integer values, you should declare a long integer. The size of a long integer is essentially unlimited. The L at the end of the number indicates that it is a long integer."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:83
msgid "Use int(*n*) to convert a variable to an integer; use long(*n*) to convert a variable to a long integer."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:100
msgid "All Abaqus Scripting Interface object types begin with an uppercase character; for example, a Part or a Viewport. An integer is another kind of object and follows the same convention. The Abaqus Scripting Interface refers to an integer object as an Int. Similarly, the Abaqus Scripting Interface refers to a floating-point object as a Float."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:103
msgid "Float"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:105
msgid "Floats represent floating-point numbers or real numbers. You can use exponential notation for floats."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:115
msgid "A float is based on a C double and can be compared to a Fortran real\\*8. Use float(**n**) to convert a variable to a float."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:118
msgid "Complex"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:120
msgid "Complex numbers use the j notation to indicate the imaginary part of the number. Python provides methods to manipulate complex numbers. The conjugate method calculates the conjugate of a complex number."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:128
msgid "A complex number has two members, the real member and the imaginary member."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:138
msgid "Python provides complex math functions to operate on complex variables. You need to import the cmath module to use the complex square root function."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:147
msgid "Remember, functions of a type are called methods; data of a type are called members. In our example conjugate is a method of a complex type; a.real refers to the real member of a complex type."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:150
#: ../../user/python/introduction/python-basics.rst:175
msgid "Sequences"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:152
msgid "Sequences include strings, lists, tuples, and arrays. Sequences are described in `sequences`_ and `sequence operations`_."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:155
msgid "Determining the type of a variable"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:157
msgid "You use the `type()` function to return the type of the object to which a variable refers."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:177
msgid "Sequences are important and powerful data types in Python. A sequence is an object containing a series of objects. There are three types of built-in sequences in Python—list, tuple, and string. In addition, imported modules allow you to use arrays in your scripts. The following table describes the characteristics of list, tuple, string, and array sequences."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:179
msgid "Mutable: Elements can be added, changed, and removed."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:180
msgid "Homogeneous: Elements must be of the same type."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:181
msgid "Methods: The type has methods that can be used to manipulate the sequence; for example, `sort()`, `reverse()`."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:182
msgid "Syntax: The syntax used to create the sequence."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:185
msgid "List"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:187
msgid "Lists are mutable heterogeneous sequences (anything that can be modified is called mutable). A list can be a sequence of strings, integers, floats, or any combination of these. In fact, a list can contain any type of object; for example,"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:194
msgid "You can refer to individual items from a sequence using the index of the item. Indices start at zero. Negative indices count backward from the end of a sequence."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:210
msgid "Lists are heterogeneous, which means they can contain objects of different type."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:216
msgid "A list can contain other lists."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:226
msgid "`myList[1][2]` refers to the third item in the second list. Remember, indices start at zero."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:233
msgid "Python has built-in methods that allow you to operate on the items in a sequence."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:246
msgid "The following are some additional built-in methods that operate on lists:"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:248
msgid "`count()`"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:250
msgid "Return the number of times a value appears in the list."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:258
msgid "`index()`"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:260
msgid "Return the index indicating the first time an item appears in the list."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:269
msgid "`insert()`"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:271
msgid "Insert a new element into a list at a specified location."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:279
msgid "`reverse()`"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:281
msgid "Reverse the elements in a list."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:290
msgid "`sort()`"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:292
msgid "Sort the elements in a list."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:301
msgid "Tuple"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:303
msgid "Tuples are very similar to lists; however, they are immutable heterogeneous sequences, which means that you cannot change them after you create them. You can think of a tuple as a list that cannot be modified. Tuples have no methods; you cannot append items to a tuple, and you cannot modify or delete the items in a tuple. The following statement creates an empty tuple:"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:309
msgid "The following statement creates a tuple with one element:"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:315
msgid "You can use the `tuple()` function to convert a list or a string to a tuple."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:328
msgid "The following statements create a tuple and then try to change the value of an item in the tuple. An `AttributeError` error message is generated because a tuple is immutable."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:342
msgid "String"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:344
msgid "Strings are immutable sequences of characters. Strings are defined by single or double quotation marks. You can use the + operator to concatenate two strings and create a third string; for example,"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:357
msgid "You can also use the + operator to concatenate tuples and lists."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:359
msgid "Python provides a set of functions that operate on strings."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:370
msgid "As with all sequences, you use negative indices to index backward from the end of a string."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:378
msgid "Use the built-in str function to convert an object to a string."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:386
msgid "Look at the standard Python documentation on the official Python website (https://www.python.org) for a list of common string operations. String functions are described in the String Services section of the Python Library Reference."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:389
msgid "Array"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:391
msgid "Arrays are mutable homogeneous sequences. The numpy module allows you to create and operate on multidimensional arrays. Python determines the type of elements in the array; you do not have to declare the type when you create the array. For more information about the numpy module, see https://numpy.org."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:414
msgid "Sequence operations"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:416
msgid "Python provides a set of tools that allow you to operate on a sequence."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:419
msgid "Slicing"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:421
msgid "Sequences can be divided into smaller sequences. This operation is called slicing. The expression sequence[m:n] returns a copy of sequence from m to n−1. The default value for m is zero; the default value for n is the length of the sequence."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:435
msgid "Repeat a sequence"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:447
msgid "Determine the length of a sequence"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:460
msgid "Concatenate sequences"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:474
msgid "Range"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:476
msgid "The `range()` function generates a list containing a sequence of integers. You can use the `range()` function to control iterative loops. The arguments to range are start (the starting value), end (the ending value plus one), and step (the step between each value). The start and step arguments are optional; the default start argument is 0, and the default step argument is 1. The arguments must be integers."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:488
msgid "Convert a sequence type"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:490
msgid "Convert a sequence to a list or a tuple."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:506
msgid "Python None"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:508
msgid "Python defines a special object called the None object or Python None that represents an empty value. The None object is returned by functions and methods that do not have a return value. The None object has no value and prints as None. For example"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:522
msgid "Continuation lines and comments"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:524
msgid "You can continue a statement on the following line if you break the statement between a set of (), {}, or [] delimiters. For example, look at the tuple that was used in :doc:`/user/about/examples/create-part` to assign the coordinates of the vertices to a variable:"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:532
msgid "If a statement breaks at any other place, you must include a \\\\ character at the end of the line to indicate that it is continued on the next line. For example,"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:539
msgid "When you are running Python from a local Linux or Windows window, the prompt changes to the . . . characters to indicate that you are on a continuation line. Comments in a Python script begin with the # character and continue to the end of the line."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:548
msgid "Printing variables using formatted output"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:550
msgid "Python provides a print function that displays the value of a variable. For example,"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:561
msgid "The string modulus operator % allows you to format your output. The %s operator in the following example converts the variables to strings."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:568
msgid "The `%f` operator specifies floating point notation and indicates the total number of characters to print and the number of decimal places."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:575
msgid "The `%E` operator specifies scientific notation and indicates the number of decimal places."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:582
msgid "The following list includes some additional useful printing operators. The `+` flag indicates that a number should include a sign."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:585
msgid "The `\\\\n` escape sequence inserts a new line."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:587
msgid "The `\\\\t` escape sequence inserts a tab character."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:589
msgid "For example,"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:598
msgid "Control blocks"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:600
msgid "Python does not use a special character, such as }, to signify the end of a control block such as an if statement. Instead, Python uses indentation to indicate the end of a control block. You define the indentation that governs a block. When your script returns to the original indentation, the block ends. For example,"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:614
msgid "When you are using the Python interpreter from the Abaqus/CAE command line interface or if you are running Python from a local Linux or Windows window, the prompt changes to the \"...\"\" characters to indicate that you are in a block controlled by indentation."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:617
msgid "if, elif, and else"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:630
msgid "while"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:648
msgid "Use `continue` to skip the rest of the loop and to go to the next iteration."
msgstr ""

#: ../../user/python/introduction/python-basics.rst:661
msgid "for"
msgstr ""

#: ../../user/python/introduction/python-basics.rst:663
msgid "Use a sequence to control the start and the end of for loops. The `range()` function is an easy way to create a sequence."
msgstr ""
