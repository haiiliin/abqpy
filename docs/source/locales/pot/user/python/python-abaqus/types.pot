# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, WANG Hailin
# This file is distributed under the same license as the abqpy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abqpy 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-30 00:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../user/python/python-abaqus/types.md:1
msgid "Abaqus Scripting Interface data types"
msgstr ""

#: ../../user/python/python-abaqus/types.md:3
msgid "This section describe the most common Abaqus Scripting Interface data type The standard {ref}`python-data-types` described in Python data types include integers, floats, strings, and sequences. The Abaqus Scripting Interface adds over 500 additional data types."
msgstr ""

#: ../../user/python/python-abaqus/types.md:5
msgid "SymbolicConstants"
msgstr ""

#: ../../user/python/python-abaqus/types.md:7
msgid "Some arguments require that you provide a SymbolicConstant. SymbolicConstants are defined by the Abaqus Scripting Interface and are written in all capital letters. If your script uses a SymbolicConstant defined by the Abaqus Scripting Interface, you must import the SymbolicConstant with the following statement before you refer to it:"
msgstr ""

#: ../../user/python/python-abaqus/types.md:13
msgid "When an argument to a command is a SymbolicConstant, the description in the {doc}`/references` lists all its possible values. For example, when you are printing an image, the image can be rendered in one of the following formats: BLACK_AND_WHITE, GREYSCALE, or COLOR."
msgstr ""

#: ../../user/python/python-abaqus/types.md:15
msgid "Similarly, a data member can be a SymbolicConstant. For example, the type member of the Elastic object can be one of the following SymbolicConstants: ISOTROPIC, ORTHOTROPIC, ANISOTROPIC, ENGINEERING_CONSTANTS, LAMINA, TRACTION, or COUPLED_TRACTION."
msgstr ""

#: ../../user/python/python-abaqus/types.md:17
msgid "If the SymbolicConstants provided by the Abaqus Scripting Interface do not meet your needs, you can create your own SymbolicConstants using the SymbolicConstant constructor. For more information, see SymbolicConstant object."
msgstr ""

#: ../../user/python/python-abaqus/types.md:19
msgid "Booleans"
msgstr ""

#: ../../user/python/python-abaqus/types.md:21
msgid "Python defines two Boolean values, True and False. The type of a Python Boolean is \\<type 'bool'>."
msgstr ""

#: ../../user/python/python-abaqus/types.md:29
msgid "In addition, the Abaqus Scripting Interface defines a Boolean object, derived from the SymbolicConstant object, which can take the values ON and OFF. For example, `noPartsInputFile` is a member of a Model object that indicates whether the input file will be written with parts and assemblies. The type of the `noPartsInputFile` member is \\<type 'AbaqusBoolean'>."
msgstr ""

#: ../../user/python/python-abaqus/types.md:31
msgid "Abaqus recommends that you use the Python Boolean in your scripts and that you convert existing scripts to use the Python Boolean."
msgstr ""

#: ../../user/python/python-abaqus/types.md:33
msgid "The value of a Boolean argument can appear to be ambiguous; for example,"
msgstr ""

#: ../../user/python/python-abaqus/types.md:43
msgid "Because of this ambiguity, you should test a Boolean for a positive or negative value, as opposed to comparing it to a specific value like 0, OFF, or False. For example, the following statements show how you should test the value of a Boolean member:"
msgstr ""

#: ../../user/python/python-abaqus/types.md:54
msgid "Repositories"
msgstr ""

#: ../../user/python/python-abaqus/types.md:56
msgid "Repositories are containers that store a particular type of object; for example, the steps repository contains all the steps defined in the model. A repository maps to a set of information and is similar to a Python dictionary; for more information, see {ref}`using-dictionaries`. However, only a constructor can add an object to a repository. In addition, all the objects in a repository are of the same type. For example, the following repository contains all the models in the model database:"
msgstr ""

#: ../../user/python/python-abaqus/types.md:62
msgid "In turn, the following repository contains all the parts in the model `Model-1`:"
msgstr ""

#: ../../user/python/python-abaqus/types.md:68
msgid "As with dictionaries, you can refer to an object in a repository using its key. The key is typically the name you provided in the constructor command when the object was created. For example, the Viewport constructor creates a new Viewport object in the viewports repository."
msgstr ""

#: ../../user/python/python-abaqus/types.md:75
msgid "The key to this new Viewport object in the viewports repository is Side view. You use this key to access this particular Viewport object. For example,"
msgstr ""

#: ../../user/python/python-abaqus/types.md:81
msgid "You can make your scripts more readable by assigning a variable to an object in a repository. For example, you could rewrite the previous statement after assigning the Viewport object to the variable myViewport:"
msgstr ""

#: ../../user/python/python-abaqus/types.md:89
msgid "In general, if the user can create the object, its repository key is a string. In some cases Abaqus/CAE creates an object, and the key can be a string, an integer, or a SymbolicConstant."
msgstr ""

#: ../../user/python/python-abaqus/types.md:91
msgid "As with dictionaries, you can use the keys() method to access the repository keys."
msgstr ""

#: ../../user/python/python-abaqus/types.md:105
msgid "You can use the `keys()[i]` method to access an individual key; however, most repositories are not ordered, and this is not recommended."
msgstr ""

#: ../../user/python/python-abaqus/types.md:107
msgid "You can use the `changeKey()` method to change the name of a key in a repository. For example,"
msgstr ""
