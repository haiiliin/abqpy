# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, WANG Hailin
# This file is distributed under the same license as the abqpy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abqpy 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-30 00:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../user/python/python-abaqus/oop.md:1
msgid "Object-oriented programming and the Abaqus Scripting Interface"
msgstr ""

#: ../../user/python/python-abaqus/oop.md:3
msgid "You should now be familiar with some of the concepts behind object-oriented programming, such as objects, constructors, methods, and members. This section describes how object-oriented programming relates to the Abaqus Scripting Interface and summarizes some of the terminology."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:5
msgid "The Abaqus Scripting Interface and methods"
msgstr ""

#: ../../user/python/python-abaqus/oop.md:7
msgid "Most Abaqus Scripting Interface commands are methods. For example,"
msgstr ""

#: ../../user/python/python-abaqus/oop.md:13
msgid "In this example `setValues()` is a method of the Viewport object."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:15
msgid "A constructor is a method that creates an object. By convention, all constructor names and all objects start with an uppercase character in the Abaqus Scripting Interface. The name of a constructor is usually the same as the name of the type of object it creates. In the following example `Viewport` is a constructor that creates a Viewport object called `myViewport`:"
msgstr ""

#: ../../user/python/python-abaqus/oop.md:22
msgid "Some objects do not have a constructor. The object is created as a member of another object when the first object is created. For example, Abaqus creates the vertices of a part when you create a part's geometry, and the coordinates of the vertices are stored as Vertex objects. The Vertex objects are members of the Part object. The following statement prints the coordinates of the first vertex of a part:"
msgstr ""

#: ../../user/python/python-abaqus/oop.md:29
msgid "The standard Python statement `object.__methods__` lists all the methods of an object. For example, the following statement lists all the methods of a Viewport object:"
msgstr ""

#: ../../user/python/python-abaqus/oop.md:35
msgid "See the {doc}`/references` for a description of each method of the Abaqus Scripting Interface objects."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:37
msgid "The Abaqus Scripting Interface and members"
msgstr ""

#: ../../user/python/python-abaqus/oop.md:39
msgid "An object has members as well as methods. A member can be thought of as a property of an object. For example, `width` is a member of the Viewport object. The following statements show how you access a member of an object:"
msgstr ""

#: ../../user/python/python-abaqus/oop.md:46
msgid "The standard Python statement `object.__members__` lists all the members of an object. For example, the following statement lists all the members of a Viewport object:"
msgstr ""

#: ../../user/python/python-abaqus/oop.md:52
msgid "The values of members are specific to each instance of the object. For example, the value of the `width` member of a Viewport object is specific to each viewport."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:54
msgid "Members of an Abaqus object are read-only; consequently, you cannot change their value with a simple assignment statement. You use the `setValues()` method to change the value of a member. For example, the `setValues()` statement in the following script changes the thickness of a shell section:"
msgstr ""

#: ../../user/python/python-abaqus/oop.md:69
msgid "You cannot use assignment to change the value of the Shell object."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:76
msgid "The following statements illustrate the use of constructors, methods, and members:"
msgstr ""

#: ../../user/python/python-abaqus/oop.md:106
msgid "You use the `Access` description provided with each object in the {doc}`/references` to determine how you access the object. You append a method or member to this description when you are writing a script. Similarly, you use the `Path` description provided with each constructor in the {doc}`/references` to determine the path to the constructor."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:108
msgid "Object-oriented programming and the Abaqus Scripting Interface - a summary"
msgstr ""

#: ../../user/python/python-abaqus/oop.md:110
msgid "After you create an object, you then use methods of the objects to enter or to modify the data associated with the object. For example, you use the `addNodes` and `addElements` methods of the Part object to add nodes and elements, respectively. Similarly, you use the `addData` method of the `FieldOutput` object to add field output data."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:112
msgid "The following list summarizes some of the concepts behind object-oriented programming and how they relate to the Abaqus Scripting Interface:"
msgstr ""

#: ../../user/python/python-abaqus/oop.md:114
msgid "An object encapsulates some data and functions that are used to manipulate those data."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:115
msgid "The data encapsulated by an object are called the members of the object."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:116
msgid "The functions that manipulate the data are called methods."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:117
msgid "The Abaqus Scripting Interface uses the convention that the name of a type of object begins with an uppercase character; for example, a Viewport object."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:118
msgid "A method that creates an object is called a constructor. The Abaqus Scripting Interface uses the convention that constructors begin with an uppercase character. In contrast, methods that operate on an object begin with a lowercase character."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:119
msgid "After you create an object, you then use methods of the object to enter or to modify the data associated with the object. For example, if you are creating an output database, you first create an Odb object. You then use the `addNodes` and `addElements` methods of the Part object to add nodes and elements, respectively. Similarly, you use the `addData` method of the `FieldOutput` object to add field output data to the output database."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:120
msgid "You use the `Access` description provided with each object in the {doc}`/references` to determine how you access the object. You append a method or a member to this description when you are writing a script."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:121
msgid "You use the `Path` description provided with each constructor in the {doc}`/references` to determine the path to the constructor."
msgstr ""

#: ../../user/python/python-abaqus/oop.md:122
msgid "You use the `setValues()` method to modify the members of an Abaqus Scripting Interface object."
msgstr ""
