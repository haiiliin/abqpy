# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, WANG Hailin
# This file is distributed under the same license as the abqpy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abqpy 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-01 09:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../reference/session/display.rst:3
msgid "Display Group"
msgstr ""

#: ../../reference/session/display.rst:5
msgid "Display group commands are used to select a subset of the entities displayed in the viewport."
msgstr ""

#: ../../reference/session/display.rst:9
msgid "Create display groups"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupSession.py:docstring of abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromConstraintNames.py:docstring of abaqus.DisplayGroup.LeafFromConstraintNames.LeafFromConstraintNames:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromDatums.py:docstring of abaqus.DisplayGroup.LeafFromDatums.LeafFromDatums:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromDisplayGroup.py:docstring of abaqus.DisplayGroup.LeafFromDisplayGroup.LeafFromDisplayGroup:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromElementLabels.LeafFromElementLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromElementSets.py:docstring of abaqus.DisplayGroup.LeafFromElementSets.LeafFromElementSets:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromElementVarRange.py:docstring of abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromGeometry.py:docstring of abaqus.DisplayGroup.LeafFromGeometry.LeafFromGeometry:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromInstance.py:docstring of abaqus.DisplayGroup.LeafFromInstance.LeafFromInstance:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromInstanceElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromInstanceElementLabels.LeafFromInstanceElementLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromInstanceNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromInstanceNodeLabels.LeafFromInstanceNodeLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromMeshElementLabels.LeafFromMeshElementLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromMeshNodeLabels.LeafFromMeshNodeLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshSurfaceSets.py:docstring of abaqus.DisplayGroup.LeafFromMeshSurfaceSets.LeafFromMeshSurfaceSets:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromModelElemLabels.py:docstring of abaqus.DisplayGroup.LeafFromModelElemLabels.LeafFromModelElemLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromModelNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromModelNodeLabels.LeafFromModelNodeLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromNodeLabels.LeafFromNodeLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeSets.py:docstring of abaqus.DisplayGroup.LeafFromNodeSets.LeafFromNodeSets:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeVarRange.py:docstring of abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbEdgePick.py:docstring of abaqus.DisplayGroup.LeafFromOdbEdgePick.LeafFromOdbEdgePick:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementLayups.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementLayups.LeafFromOdbElementLayups:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementMaterials.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementMaterials.LeafFromOdbElementMaterials:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementPick.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementPick.LeafFromOdbElementPick:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementPlies.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementPlies.LeafFromOdbElementPlies:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementSections.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementSections.LeafFromOdbElementSections:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementTypes.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementTypes.LeafFromOdbElementTypes:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbNodePick.py:docstring of abaqus.DisplayGroup.LeafFromOdbNodePick.LeafFromOdbNodePick:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromPartElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromPartElementLabels.LeafFromPartElementLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromPartInstance.py:docstring of abaqus.DisplayGroup.LeafFromPartInstance.LeafFromPartInstance:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromPartNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromPartNodeLabels.LeafFromPartNodeLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromReferencePoint.py:docstring of abaqus.DisplayGroup.LeafFromReferencePoint.LeafFromReferencePoint:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromSets.py:docstring of abaqus.DisplayGroup.LeafFromSets.LeafFromSets:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromSurfaceSets.py:docstring of abaqus.DisplayGroup.LeafFromSurfaceSets.LeafFromSurfaceSets:0
msgid "Public Data Attributes:"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`attachedToGui <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.attachedToGui>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A Boolean specifying whether an Abaqus interactive session is running."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`replayInProgress <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.replayInProgress>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A Boolean specifying whether Abaqus is executing a replay file."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`kernelMemoryFootprint <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.kernelMemoryFootprint>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A Float specifying the memory usage value for the Abaqus/CAE kernel process in megabytes."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`kernelMemoryMaxFootprint <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.kernelMemoryMaxFootprint>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A Float specifying the maximum value for the memory usage for the Abaqus/CAE kernel process in megabytes."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`kernelMemoryLimit <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.kernelMemoryLimit>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A Float specifying the limit for the memory use for the Abaqus/CAE kernel process in megabytes."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`colors <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.colors>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of Color objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`journalOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.journalOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.Session.JournalOptions.JournalOptions` object specifying how to record selection of geometry in the journal and replay files."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`memoryReductionOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.memoryReductionOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.Session.MemoryReductionOptions.MemoryReductionOptions` object specifying options for running in reduced memory mode."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`nodeQuery <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.nodeQuery>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.PathAndProbe.NodeQuery.NodeQuery` object specifying nodes and their coordinates in a path."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`sketcherOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.sketcherOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.Sketcher.ConstrainedSketchOptions.ConstrainedSketcherOptions.ConstrainedSketcherOptions` object specifying common options for all sketches."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`viewerOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.viewerOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.OdbDisplay.ViewerOptions.ViewerOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`animationOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.animationOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "An :py:class:`~abaqus.Animation.AnimationOptions.AnimationOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`aviOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.aviOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "An :py:class:`~abaqus.Animation.AVIOptions.AVIOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`imageAnimationOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.imageAnimationOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "An :py:class:`~abaqus.Animation.ImageAnimationOptions.ImageAnimationOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`imageAnimation <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.imageAnimation>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "An :py:class:`~abaqus.Animation.ImageAnimation.ImageAnimation` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`quickTimeOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.quickTimeOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.Animation.QuickTimeOptions.QuickTimeOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`viewports <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.viewports>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of Viewport objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`customData <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.customData>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.CustomKernel.RepositorySupport.RepositorySupport` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`defaultFieldReportOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.defaultFieldReportOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.FieldReport.FieldReportOptions.FieldReportOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`defaultFreeBodyReportOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.defaultFreeBodyReportOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.FieldReport.FreeBodyReportOptions.FreeBodyReportOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`fieldReportOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.fieldReportOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`freeBodyReportOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.freeBodyReportOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`odbs <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.odbs>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of Odb objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`scratchOdbs <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.scratchOdbs>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of ScratchOdb objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`defaultOdbDisplay <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.defaultOdbDisplay>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.OdbDisplay.DefaultOdbDisplay.DefaultOdbDisplay` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`defaultPlot <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.defaultPlot>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.XY.DefaultPlot.DefaultPlot` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`defaultChartOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.defaultChartOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.XY.DefaultChartOptions.DefaultChartOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`odbData <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.odbData>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of OdbData objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`mdbData <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.mdbData>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of MdbData objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`paths <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.paths>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of Path objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`freeBodies <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.freeBodies>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of FreeBody objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`streams <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.streams>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of Stream objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`spectrums <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.spectrums>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of Spectrum objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`currentProbeValues <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.currentProbeValues>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.PathAndProbe.CurrentProbeValues.CurrentProbeValues` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`defaultProbeOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.defaultProbeOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.PathAndProbe.ProbeOptions.ProbeOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`probeOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.probeOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`probeReport <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.probeReport>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.PathAndProbe.ProbeReport.ProbeReport` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`defaultProbeReport <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.defaultProbeReport>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`selectedProbeValues <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.selectedProbeValues>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.PathAndProbe.SelectedProbeValues.SelectedProbeValues` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`printOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.printOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.Print.PrintOptions.PrintOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`epsOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.epsOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "An :py:class:`~abaqus.Print.EpsOptions.EpsOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`pageSetupOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.pageSetupOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.Print.PageSetupOptions.PageSetupOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`pngOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.pngOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.Print.PngOptions.PngOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`psOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.psOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.Print.PsOptions.PsOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`svgOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.svgOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.Print.SvgOptions.SvgOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`tiffOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.tiffOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.PredefinedField.TiffOptions.TiffOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`autoColors <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.autoColors>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "An :py:class:`~abaqus.Session.AutoColors.AutoColors` object specifying the color palette to be used for color coding."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`xyColors <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.xyColors>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "An :py:class:`~abaqus.Session.AutoColors.AutoColors` object specifying the color palette to be used forXYCurve objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`xyDataObjects <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.xyDataObjects>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of XYData objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`curves <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.curves>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of XYCurve objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`xyPlots <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.xyPlots>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of XYPlot objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`charts <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.charts>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of Chart objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`defaultXYReportOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.defaultXYReportOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "An :py:class:`~abaqus.XY.XYReportOptions.XYReportOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`xyReportOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.xyReportOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`views <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.views>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of View objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`networkDatabaseConnectors <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.networkDatabaseConnectors>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of NetworkDatabaseConnector objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`displayGroups <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.displayGroups>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of DisplayGroup objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`graphicsInfo <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.graphicsInfo>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.DisplayOptions.GraphicsInfo.GraphicsInfo` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`defaultGraphicsOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.defaultGraphicsOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.DisplayOptions.GraphicsOptions.GraphicsOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`graphicsOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.graphicsOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`defaultViewportAnnotationOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.defaultViewportAnnotationOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.DisplayOptions.ViewportAnnotationOptions.ViewportAnnotationOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`queues <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.queues>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of Queue objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`currentViewportName <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.currentViewportName>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A String specifying the name of the current viewport."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`sessionState <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.sessionState>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A Dictionary object specifying the viewports and their associated models."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`images <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.images>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of Image objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`movies <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.movies>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of Movie objects."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`defaultLightOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.defaultLightOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.DisplayOptions.LightOptions.LightOptions` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`drawingArea <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.drawingArea>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.Canvas.DrawingArea.DrawingArea` object."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`defaultMesherOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.defaultMesherOptions>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A :py:class:`~abaqus.Mesh.MesherOptions.MesherOptions` object specifying how to control default settings in the Mesh module."
msgstr ""

#: ../../None:72:<autosummary>:1
msgid ":py:obj:`drawings <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.drawings>`\\"
msgstr ""

#: ../../None:72:<autosummary>:1
msgid "A repository of Drawing objects."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstanceRepository.py:docstring of abaqus.DisplayGroup.DisplayGroupInstanceRepository.DisplayGroupInstanceRepository:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupSession.py:docstring of abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession:0
#: ../../../../src/abaqus/DisplayGroup/Leaf.py:docstring of abaqus.DisplayGroup.Leaf.Leaf:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromConstraintNames.py:docstring of abaqus.DisplayGroup.LeafFromConstraintNames.LeafFromConstraintNames:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromDatums.py:docstring of abaqus.DisplayGroup.LeafFromDatums.LeafFromDatums:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromDisplayGroup.py:docstring of abaqus.DisplayGroup.LeafFromDisplayGroup.LeafFromDisplayGroup:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromElementLabels.LeafFromElementLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromElementSets.py:docstring of abaqus.DisplayGroup.LeafFromElementSets.LeafFromElementSets:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromElementVarRange.py:docstring of abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromGeometry.py:docstring of abaqus.DisplayGroup.LeafFromGeometry.LeafFromGeometry:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromInstance.py:docstring of abaqus.DisplayGroup.LeafFromInstance.LeafFromInstance:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromInstanceElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromInstanceElementLabels.LeafFromInstanceElementLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromInstanceNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromInstanceNodeLabels.LeafFromInstanceNodeLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromMeshElementLabels.LeafFromMeshElementLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromMeshNodeLabels.LeafFromMeshNodeLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshSurfaceSets.py:docstring of abaqus.DisplayGroup.LeafFromMeshSurfaceSets.LeafFromMeshSurfaceSets:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromModelElemLabels.py:docstring of abaqus.DisplayGroup.LeafFromModelElemLabels.LeafFromModelElemLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromModelNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromModelNodeLabels.LeafFromModelNodeLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromNodeLabels.LeafFromNodeLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeSets.py:docstring of abaqus.DisplayGroup.LeafFromNodeSets.LeafFromNodeSets:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeVarRange.py:docstring of abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbEdgePick.py:docstring of abaqus.DisplayGroup.LeafFromOdbEdgePick.LeafFromOdbEdgePick:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementLayups.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementLayups.LeafFromOdbElementLayups:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementMaterials.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementMaterials.LeafFromOdbElementMaterials:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementPick.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementPick.LeafFromOdbElementPick:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementPlies.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementPlies.LeafFromOdbElementPlies:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementSections.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementSections.LeafFromOdbElementSections:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementTypes.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementTypes.LeafFromOdbElementTypes:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbNodePick.py:docstring of abaqus.DisplayGroup.LeafFromOdbNodePick.LeafFromOdbNodePick:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromPartElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromPartElementLabels.LeafFromPartElementLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromPartInstance.py:docstring of abaqus.DisplayGroup.LeafFromPartInstance.LeafFromPartInstance:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromPartNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromPartNodeLabels.LeafFromPartNodeLabels:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromReferencePoint.py:docstring of abaqus.DisplayGroup.LeafFromReferencePoint.LeafFromReferencePoint:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromSets.py:docstring of abaqus.DisplayGroup.LeafFromSets.LeafFromSets:0
#: ../../../../src/abaqus/DisplayGroup/LeafFromSurfaceSets.py:docstring of abaqus.DisplayGroup.LeafFromSurfaceSets.LeafFromSurfaceSets:0
msgid "Public Methods:"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`DisplayGroup <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.DisplayGroup>`\\ \\(name\\, leaf\\)"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupSession.py:docstring of abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.DisplayGroup:1
#: ../../None:10:<autosummary>:1
#: ../../None:3:<autosummary>:1
msgid "This method creates a DisplayGroup object."
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`setValues <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.setValues>`\\ \\(\\[kernelMemoryLimit\\]\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid "This method modifies the Session object."
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`enableCADConnection <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.enableCADConnection>`\\ \\(CADName\\[\\, portNum\\]\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid "This method enables the Abaqus/CAE listening port for the specified **CAD** system."
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`isCADConnectionEnabled <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.isCADConnectionEnabled>`\\ \\(\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid "This method checks the status of CAD Connection."
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`disableCADConnection <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.disableCADConnection>`\\ \\(CADName\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid "This method disables an associative import CAD connection that was enabled."
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`enableParameterUpdate <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.enableParameterUpdate>`\\ \\(CADName\\, CADVersion\\[\\, ...\\]\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid "This method enables parameter updates for ProE and NX by establishing a connection with the listening port previously setup by the CAD application."
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`setCADPortNumber <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.setCADPortNumber>`\\ \\(CADName\\, Port\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid "This method enables parameter updates for CATIA V5 and CATIA V6 by establishing a connection with the listening port previously setup by the CAD application."
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`updateCADParameters <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.updateCADParameters>`\\ \\(modelName\\, CADName\\, ...\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid "This method updates the parameters for the specified model using the specified parameter file."
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`disableParameterUpdate <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.disableParameterUpdate>`\\ \\(CADName\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid "This method disables an associative CAD connection using parameters."
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`printToFile <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.printToFile>`\\ \\(fileName\\[\\, format\\, ...\\]\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid "This method prints canvas objects to a file using the attributes stored in the PrintOptions object and the appropriate format options object."
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`printToPrinter <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.printToPrinter>`\\ \\(\\[printCommand\\, numCopies\\, ...\\]\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid "This method prints canvas objects to a Windows printer or to a PostScript printer."
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`saveOptions <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.saveOptions>`\\ \\(directory\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid "This method saves your customized display settings."
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`writeVrmlFile <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.writeVrmlFile>`\\ \\(fileName\\[\\, format\\, canvasObjects\\]\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid "This method exports the current viewport objects to a file."
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`write3DXMLFile <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.write3DXMLFile>`\\ \\(fileName\\[\\, format\\, canvasObjects\\]\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`writeOBJFile <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.writeOBJFile>`\\ \\(fileName\\[\\, canvasObjects\\]\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid ":py:obj:`openOdb <abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.openOdb>`\\ \\(name\\[\\, path\\, readOnly\\]\\)"
msgstr ""

#: ../../None:17:<autosummary>:1
msgid "This method opens an existing output database (`.odb`) file and creates a new Odb object. This method is accessed only via the session object inside Abaqus/CAE and adds the new Odb object to the session.odbs repository. This method allows you to open multiple output databases at the same time and to use the repository key to specify a particular output database. For example::."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupSession.py:docstring of abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.DisplayGroup:4
msgid "This function can be accessed by::"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup:19
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupSession.py:docstring of abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.DisplayGroup:9
msgid "Check `DisplayGroup on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-displaygrouppyc.htm?contextscope=all>`__."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.add:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.either:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.intersect:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.remove:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.replace:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.setValues:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstanceRepository.py:docstring of abaqus.DisplayGroup.DisplayGroupInstanceRepository.DisplayGroupInstanceRepository.syncOptions:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupSession.py:docstring of abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.DisplayGroup:0
msgid "Parameters"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstanceRepository.py:docstring of abaqus.DisplayGroup.DisplayGroupInstanceRepository.DisplayGroupInstanceRepository.syncOptions:8
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupSession.py:docstring of abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.DisplayGroup:12
#: ../../None:5:<autosummary>:1
#: ../../None:8:<autosummary>:1
#: ../../docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.name:1
#: ../../docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.name:1
msgid "A String specifying the repository key."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupSession.py:docstring of abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.DisplayGroup:14
msgid "A :py:class:`~abaqus.DisplayGroup.Leaf.Leaf` object specifying the items in the display group."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.elements:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.nodes:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupSession.py:docstring of abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.DisplayGroup:0
msgid "Returns"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupSession.py:docstring of abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.DisplayGroup:16
msgid "A :py:class:`~abaqus.DisplayGroup.DisplayGroup.DisplayGroup` object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.elements:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.nodes:0
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupSession.py:docstring of abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.DisplayGroup:0
msgid "Return type"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupSession.py:docstring of abaqus.DisplayGroup.DisplayGroupSession.DisplayGroupSession.DisplayGroup:17
msgid ":class:`DisplayGroup`"
msgstr ""

#: ../../reference/session/display.rst:18
msgid "Object features"
msgstr ""

#: ../../reference/session/display.rst:21
msgid "DisplayGroup"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup:1
msgid "DisplayGroup objects are used to select a subset of the entities displayed in the viewport."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup:5
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance:7
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstanceRepository.py:docstring of abaqus.DisplayGroup.DisplayGroupInstanceRepository.DisplayGroupInstanceRepository:6
#: ../../../../src/abaqus/DisplayGroup/Leaf.py:docstring of abaqus.DisplayGroup.Leaf.Leaf:9
#: ../../../../src/abaqus/DisplayGroup/LeafFromConstraintNames.py:docstring of abaqus.DisplayGroup.LeafFromConstraintNames.LeafFromConstraintNames:9
#: ../../../../src/abaqus/DisplayGroup/LeafFromDatums.py:docstring of abaqus.DisplayGroup.LeafFromDatums.LeafFromDatums:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromDisplayGroup.py:docstring of abaqus.DisplayGroup.LeafFromDisplayGroup.LeafFromDisplayGroup:7
#: ../../../../src/abaqus/DisplayGroup/LeafFromElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromElementLabels.LeafFromElementLabels:9
#: ../../../../src/abaqus/DisplayGroup/LeafFromElementSets.py:docstring of abaqus.DisplayGroup.LeafFromElementSets.LeafFromElementSets:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromElementVarRange.py:docstring of abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromGeometry.py:docstring of abaqus.DisplayGroup.LeafFromGeometry.LeafFromGeometry:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromInstance.py:docstring of abaqus.DisplayGroup.LeafFromInstance.LeafFromInstance:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromInstanceElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromInstanceElementLabels.LeafFromInstanceElementLabels:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromInstanceNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromInstanceNodeLabels.LeafFromInstanceNodeLabels:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromMeshElementLabels.LeafFromMeshElementLabels:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromMeshNodeLabels.LeafFromMeshNodeLabels:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshSurfaceSets.py:docstring of abaqus.DisplayGroup.LeafFromMeshSurfaceSets.LeafFromMeshSurfaceSets:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromModelElemLabels.py:docstring of abaqus.DisplayGroup.LeafFromModelElemLabels.LeafFromModelElemLabels:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromModelNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromModelNodeLabels.LeafFromModelNodeLabels:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromNodeLabels.LeafFromNodeLabels:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeSets.py:docstring of abaqus.DisplayGroup.LeafFromNodeSets.LeafFromNodeSets:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeVarRange.py:docstring of abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbEdgePick.py:docstring of abaqus.DisplayGroup.LeafFromOdbEdgePick.LeafFromOdbEdgePick:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementLayups.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementLayups.LeafFromOdbElementLayups:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementMaterials.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementMaterials.LeafFromOdbElementMaterials:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementPick.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementPick.LeafFromOdbElementPick:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementPlies.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementPlies.LeafFromOdbElementPlies:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementSections.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementSections.LeafFromOdbElementSections:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementTypes.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementTypes.LeafFromOdbElementTypes:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbNodePick.py:docstring of abaqus.DisplayGroup.LeafFromOdbNodePick.LeafFromOdbNodePick:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromPartElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromPartElementLabels.LeafFromPartElementLabels:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromPartInstance.py:docstring of abaqus.DisplayGroup.LeafFromPartInstance.LeafFromPartInstance:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromPartNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromPartNodeLabels.LeafFromPartNodeLabels:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromReferencePoint.py:docstring of abaqus.DisplayGroup.LeafFromReferencePoint.LeafFromReferencePoint:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromSets.py:docstring of abaqus.DisplayGroup.LeafFromSets.LeafFromSets:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromSurfaceSets.py:docstring of abaqus.DisplayGroup.LeafFromSurfaceSets.LeafFromSurfaceSets:8
#: ../../../../src/abaqus/DisplayGroup/LeafFromSurfaceVarRange.py:docstring of abaqus.DisplayGroup.LeafFromSurfaceVarRange.LeafFromSurfaceVarRange:8
msgid "This object can be accessed by::"
msgstr ""

#: ../../None:8:<autosummary>:1
msgid ":py:obj:`canUndo <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.canUndo>`\\"
msgstr ""

#: ../../None:8:<autosummary>:1
#: ../../docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.canUndo:1
msgid "A Boolean specifying whether Undo is possible or not."
msgstr ""

#: ../../None:8:<autosummary>:1
msgid ":py:obj:`canRedo <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.canRedo>`\\"
msgstr ""

#: ../../None:8:<autosummary>:1
#: ../../docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.canRedo:1
msgid "A Boolean specifying whether Redo is possible or not."
msgstr ""

#: ../../None:8:<autosummary>:1
msgid ":py:obj:`name <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.name>`\\"
msgstr ""

#: ../../None:8:<autosummary>:1
msgid ":py:obj:`module <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.module>`\\"
msgstr ""

#: ../../None:8:<autosummary>:1
msgid "A SymbolicConstant specifying the module in which the display group has been created."
msgstr ""

#: ../../None:8:<autosummary>:1
msgid ":py:obj:`modelName <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.modelName>`\\"
msgstr ""

#: ../../None:8:<autosummary>:1
#: ../../docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.modelName:1
msgid "A String specifying the name of the model to which the display group belongs when the module is part- or assembly-based."
msgstr ""

#: ../../None:8:<autosummary>:1
msgid ":py:obj:`partName <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.partName>`\\"
msgstr ""

#: ../../None:8:<autosummary>:1
#: ../../docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.partName:1
msgid "A String specifying the name of the part to which the display group belongs when the module is part-based."
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.__init__>`\\ \\(name\\, leaf\\)"
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ":py:obj:`add <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.add>`\\ \\(leaf\\)"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.add:1
#: ../../None:10:<autosummary>:1
msgid "This method adds the specified items to the display group."
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ":py:obj:`either <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.either>`\\ \\(leaf\\)"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.either:1
#: ../../None:10:<autosummary>:1
msgid "This method redefines the display group to be only those items that are not shared by the **leaf** argument and by the display group."
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ":py:obj:`intersect <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.intersect>`\\ \\(leaf\\)"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.intersect:1
#: ../../None:10:<autosummary>:1
msgid "This method redefines the display group to be only those items that are shared by the **leaf** argument and the display group."
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ":py:obj:`redoLast <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.redoLast>`\\ \\(\\)"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.redoLast:1
#: ../../None:10:<autosummary>:1
msgid "This method redoes the last undone operation on the display group."
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ":py:obj:`remove <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.remove>`\\ \\(leaf\\)"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.remove:1
#: ../../None:10:<autosummary>:1
msgid "This method removes the specified items from the display group."
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ":py:obj:`replace <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.replace>`\\ \\(leaf\\)"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.replace:1
#: ../../None:10:<autosummary>:1
msgid "This method replaces the contents of the display group with the specified items."
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ":py:obj:`undoLast <abaqus.DisplayGroup.DisplayGroup.DisplayGroup.undoLast>`\\ \\(\\)"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.undoLast:1
#: ../../None:10:<autosummary>:1
msgid "This method undoes the last operation performed on the display group."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.add:4
msgid "Check `DisplayGroup.add on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-displaygrouppyc.htm?contextscope=all#simaker-displaygroupaddpyc>`__."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.add:7
msgid "A :py:class:`~abaqus.DisplayGroup.Leaf.Leaf` object specifying the items to add to the display group."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.either:5
msgid "Check `DisplayGroup.either on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-displaygrouppyc.htm?contextscope=all#simaker-displaygroupeitherpyc>`__."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.either:8
msgid "A :py:class:`~abaqus.DisplayGroup.Leaf.Leaf` object specifying the items to be excluded from the display group."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.intersect:5
msgid "Check `DisplayGroup.intersect on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-displaygrouppyc.htm?contextscope=all#simaker-displaygroupintersectpyc>`__."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.intersect:8
msgid "A :py:class:`~abaqus.DisplayGroup.Leaf.Leaf` object specifying the items to be included in the display group."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.module:1
msgid "A SymbolicConstant specifying the module in which the display group has been created. The possible values are PART, ASSEMBLY, PART_ASSEMBLY, ODB, and ALL."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.remove:4
msgid "Check `DisplayGroup.remove on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-displaygrouppyc.htm?contextscope=all#simaker-displaygroupremovepyc>`__."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.remove:7
msgid "A :py:class:`~abaqus.DisplayGroup.Leaf.Leaf` object specifying the items to remove from the display group."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.replace:4
msgid "Check `DisplayGroup.replace on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-displaygrouppyc.htm?contextscope=all#simaker-displaygroupreplacepyc>`__."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroup.py:docstring of abaqus.DisplayGroup.DisplayGroup.DisplayGroup.replace:7
msgid "A :py:class:`~abaqus.DisplayGroup.Leaf.Leaf` object specifying the items with which to replace the current display group contents."
msgstr ""

#: ../../reference/session/display.rst:29
msgid "DisplayGroupArray"
msgstr ""

#: ../../reference/session/display.rst:37
msgid "DisplayGroupInstance"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance:1
msgid "A :py:class:`~abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance` object stores the IDs of the entities displayed in a viewport. The DisplayGroupInstance object has no constructor. When you set a display group to be plotted in a viewport, Abaqus/CAE creates a DisplayGroupInstance object for each display group and places it in the DisplayGroupInstanceRepository object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance:20
msgid "Check `DisplayGroupInstance on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-displaygroupinstancepyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:5:<autosummary>:1
msgid ":py:obj:`name <abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.name>`\\"
msgstr ""

#: ../../None:5:<autosummary>:1
msgid ":py:obj:`lockOptions <abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.lockOptions>`\\"
msgstr ""

#: ../../None:5:<autosummary>:1
msgid "A Boolean specifying whether the display options stored on the DisplayGroupInstance object should be synchronized with changes to the viewport display options."
msgstr ""

#: ../../None:5:<autosummary>:1
msgid ":py:obj:`odbDisplayOptions <abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.odbDisplayOptions>`\\"
msgstr ""

#: ../../None:5:<autosummary>:1
#: ../../docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.odbDisplayOptions:1
msgid "An :py:class:`~abaqus.PlotOptions.OdbDisplayOptions.OdbDisplayOptions` object specifying this member is available only for DisplayGroupInstance objects that are members of the DisplayGroupInstance repository member of the OdbDisplay object."
msgstr ""

#: ../../None:5:<autosummary>:1
msgid ":py:obj:`nodes <abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.nodes>`\\ \\(\\)"
msgstr ""

#: ../../None:5:<autosummary>:1
msgid "This method is used to obtain the list of nodes present in the DisplayGroupInstance object."
msgstr ""

#: ../../None:5:<autosummary>:1
msgid ":py:obj:`elements <abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.elements>`\\ \\(\\)"
msgstr ""

#: ../../None:5:<autosummary>:1
msgid "This method returns the list of elements present in the DisplayGroupInstance object."
msgstr ""

#: ../../None:5:<autosummary>:1
msgid ":py:obj:`setValues <abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.setValues>`\\ \\(\\[lockOptions\\]\\)"
msgstr ""

#: ../../None:5:<autosummary>:1
msgid "This method modifies the DisplayGroupInstance object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.elements:1
msgid "This method returns the list of elements present in the DisplayGroupInstance object. The elements method returns a Dictionary object that uses part instance names for the keys. The value of the items in the Dictionary object is a List of user element labels that belong to the part instance and are contained in the DisplayGroupInstance object. This method is available only for DisplayGroupInstance objects that are members of the DisplayGroupInstance repository member of the OdbDisplay object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.elements:8
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.nodes:8
msgid "A Dictionary object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.elements:9
#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.nodes:9
msgid ":class:`dict`"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.setValues:9
#: ../../docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.lockOptions:1
msgid "A Boolean specifying whether the display options stored on the DisplayGroupInstance object should be synchronized with changes to the viewport display options. This member is available only for DisplayGroupInstance objects that are members of the DisplayGroupInstance repository member of the OdbDisplay object. The default value is OFF."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.nodes:1
msgid "This method is used to obtain the list of nodes present in the DisplayGroupInstance object. It returns a Dictionary object keyed by part instance names, the value of which is a list of user node labels belonging to the part instance and contained in the DisplayGroupInstance object. This method is available only for DisplayGroupInstance objects that are members of the DisplayGroupInstance repository member of OdbDisplay object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.setValues:1
msgid "This method modifies the DisplayGroupInstance object. The setValues method is available only for DisplayGroupInstance objects that are members of the DisplayGroupInstance repository member of the OdbDisplay object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstance.py:docstring of abaqus.DisplayGroup.DisplayGroupInstance.DisplayGroupInstance.setValues:6
msgid "Check `DisplayGroupInstance.setValues on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-displaygroupinstancepyc.htm?contextscope=all#simaker-displaygroupinstancesetvaluespyc>`__."
msgstr ""

#: ../../reference/session/display.rst:45
msgid "DisplayGroupInstanceRepository"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstanceRepository.py:docstring of abaqus.DisplayGroup.DisplayGroupInstanceRepository.DisplayGroupInstanceRepository:1
msgid "The DisplayGroupInstanceRepository object stores DisplayGroupInstance objects. In addition to all the standard Python repository methods, the DisplayGroupInstance repository defines additional methods as described below."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstanceRepository.py:docstring of abaqus.DisplayGroup.DisplayGroupInstanceRepository.DisplayGroupInstanceRepository:13
msgid "Check `DisplayGroupInstanceRepository on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-displaygroupinstancerepositorypyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`syncOptions <abaqus.DisplayGroup.DisplayGroupInstanceRepository.DisplayGroupInstanceRepository.syncOptions>`\\ \\(name\\[\\, updateInstances\\]\\)"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstanceRepository.py:docstring of abaqus.DisplayGroup.DisplayGroupInstanceRepository.DisplayGroupInstanceRepository.syncOptions:1
#: ../../None:3:<autosummary>:1
msgid "This method synchronizes the display options stored on the OdbDisplay object with the display options stored on the DisplayGroupInstance object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstanceRepository.py:docstring of abaqus.DisplayGroup.DisplayGroupInstanceRepository.DisplayGroupInstanceRepository.syncOptions:5
msgid "Check `DisplayGroupInstanceRepository.syncOptions on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-displaygroupinstancerepositorypyc.htm?contextscope=all#simaker-displaygroupinstancerepositorysyncoptionspyc>`__."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/DisplayGroupInstanceRepository.py:docstring of abaqus.DisplayGroup.DisplayGroupInstanceRepository.DisplayGroupInstanceRepository.syncOptions:10
msgid "A Boolean specifying whether to synchronize the display options on all the DisplayGroupInstance objects stored in the DisplayGroupInstanceRepository for which **lockOptions** is OFF. The default value of **updateInstances** is ON."
msgstr ""

#: ../../reference/session/display.rst:53
msgid "Leaf"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/Leaf.py:docstring of abaqus.DisplayGroup.Leaf.Leaf:1
msgid "Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. Leaf objects have similarities to Set objects; however, Leaf objects are evaluated when the DisplayGroup expression is evaluated, and they can have SymbolicConstant values (which are also evaluated when the DisplayGroup expression is evaluated)."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/Leaf.py:docstring of abaqus.DisplayGroup.Leaf.Leaf:15
msgid "Check `Leaf on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leafpyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.Leaf.Leaf.__init__>`\\ \\(leafType\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.Leaf.Leaf.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromDatums.LeafFromDatums.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromDisplayGroup.LeafFromDisplayGroup.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromElementLabels.LeafFromElementLabels.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromElementSets.LeafFromElementSets.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromGeometry.LeafFromGeometry.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromInstance.LeafFromInstance.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromInstanceElementLabels.LeafFromInstanceElementLabels.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromInstanceNodeLabels.LeafFromInstanceNodeLabels.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromMeshElementLabels.LeafFromMeshElementLabels.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromMeshNodeLabels.LeafFromMeshNodeLabels.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromMeshSurfaceSets.LeafFromMeshSurfaceSets.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromModelElemLabels.LeafFromModelElemLabels.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromModelNodeLabels.LeafFromModelNodeLabels.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromNodeLabels.LeafFromNodeLabels.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromNodeSets.LeafFromNodeSets.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromOdbEdgePick.LeafFromOdbEdgePick.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromOdbElementLayups.LeafFromOdbElementLayups.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromOdbElementMaterials.LeafFromOdbElementMaterials.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromOdbElementPick.LeafFromOdbElementPick.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromOdbElementPlies.LeafFromOdbElementPlies.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromOdbElementSections.LeafFromOdbElementSections.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromOdbElementTypes.LeafFromOdbElementTypes.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromOdbNodePick.LeafFromOdbNodePick.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromPartElementLabels.LeafFromPartElementLabels.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromPartInstance.LeafFromPartInstance.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromPartNodeLabels.LeafFromPartNodeLabels.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromReferencePoint.LeafFromReferencePoint.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromSets.LeafFromSets.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromSurfaceSets.LeafFromSurfaceSets.leafType:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromSurfaceVarRange.LeafFromSurfaceVarRange.leafType:1
msgid "A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF, DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES."
msgstr ""

#: ../../reference/session/display.rst:61
msgid "LeafFromConstraintNames"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromConstraintNames.py:docstring of abaqus.DisplayGroup.LeafFromConstraintNames.LeafFromConstraintNames:1
msgid "The LeafFromConstraintNames object can be used whenever a Leaf object is expected as an argument. A Leaf object is used used to specify the items in a display group. Leaf objects are constructed as temporary objects that are used as arguments to DisplayGroup (DisplayGroup object) commands. The LeafFromConstraintNames object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromConstraintNames.py:docstring of abaqus.DisplayGroup.LeafFromConstraintNames.LeafFromConstraintNames:13
msgid "The `LeafFromConstraintNames` class was added."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromConstraintNames.py:docstring of abaqus.DisplayGroup.LeafFromConstraintNames.LeafFromConstraintNames:17
msgid "Check `LeafFromConstraintNames on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromconstraintnamespyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromConstraintNames.LeafFromConstraintNames.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
#: ../../None:6:<autosummary>:1
msgid "A SymbolicConstant specifying the leaf type."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromConstraintNames.LeafFromConstraintNames.__init__>`\\ \\(name\\, type\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of constraint objects."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromConstraintNames.LeafFromConstraintNames.leafType:1
msgid "A SymbolicConstant specifying the leaf type. Possible values are TIE, SHELL_TO_SOLID_COUPLING, DISTRIBUTING_COUPLING, KINEMATIC_COUPLING, RIGID_BODY, and MPC."
msgstr ""

#: ../../reference/session/display.rst:69
msgid "LeafFromDatums"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromDatums.py:docstring of abaqus.DisplayGroup.LeafFromDatums.LeafFromDatums:1
msgid "The LeafFromDatums object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromDatums object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromDatums.py:docstring of abaqus.DisplayGroup.LeafFromDatums.LeafFromDatums:13
msgid "Check `LeafFromDatums on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromdatumspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromDatums.LeafFromDatums.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromDatums.LeafFromDatums.__init__>`\\ \\(datumSeq\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of datum objects."
msgstr ""

#: ../../reference/session/display.rst:77
msgid "LeafFromDisplayGroup"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromDisplayGroup.py:docstring of abaqus.DisplayGroup.LeafFromDisplayGroup.LeafFromDisplayGroup:1
msgid "The LeafFromDisplayGroup object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands.The LeafFromDisplayGroup object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromDisplayGroup.py:docstring of abaqus.DisplayGroup.LeafFromDisplayGroup.LeafFromDisplayGroup:13
msgid "Check `LeafFromDisplayGroup on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromdisplaygrouppyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromDisplayGroup.LeafFromDisplayGroup.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromDisplayGroup.LeafFromDisplayGroup.__init__>`\\ \\(displayGroup\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of Display Group objects."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromDisplayGroup.LeafFromDisplayGroup.displayGroup:1
msgid "A :py:class:`~abaqus.DisplayGroup.DisplayGroupArray.DisplayGroupArray` object."
msgstr ""

#: ../../reference/session/display.rst:85
msgid "LeafFromElementLabels"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromElementLabels.LeafFromElementLabels:1
msgid "The LeafFromElementLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromElementLabels object is derived from the Leaf object. This page discusses:"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromElementLabels.LeafFromElementLabels:14
msgid "Check `LeafFromElementLabels on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromelementlabelspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromElementLabels.LeafFromElementLabels.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromElementLabels.LeafFromElementLabels.__init__>`\\ \\(partInstanceName\\, elementLabels\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of element labels that belong to a single part instance."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromElementLabels.LeafFromElementLabels.elementLabels:1
msgid "A sequence of Strings specifying expressions that denote element labels. The expression can be any of the following:An Int specifying a single element label; for example, `1`.A String specifying a single element label; for example, `'7'`.A String specifying a sequence of element labels; for example, `'3:5'` and `'3:15:3'`."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromElementLabels.LeafFromElementLabels.partInstanceName:1
msgid "A String specifying the name of the part instance to which **elementLabels** refers."
msgstr ""

#: ../../reference/session/display.rst:93
msgid "LeafFromElementSets"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromElementSets.py:docstring of abaqus.DisplayGroup.LeafFromElementSets.LeafFromElementSets:1
msgid "The LeafFromElementSets object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromElementSets object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromElementSets.py:docstring of abaqus.DisplayGroup.LeafFromElementSets.LeafFromElementSets:13
msgid "Check `LeafFromElementSets on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromelementsetspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromElementSets.LeafFromElementSets.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromElementSets.LeafFromElementSets.__init__>`\\ \\(elementSets\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of element sets."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromElementSets.LeafFromElementSets.elementSets:1
msgid "A sequence of Strings specifying element sets or a String specifying a single element set."
msgstr ""

#: ../../reference/session/display.rst:101
msgid "LeafFromElementVarRange"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromElementVarRange.py:docstring of abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange:1
msgid "The LeafFromElementVarRange object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromElementVarRange object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromElementVarRange.py:docstring of abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange:13
msgid "Check `LeafFromElementVarRange on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromelementvarrangepyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:6:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange.leafType>`\\"
msgstr ""

#: ../../None:6:<autosummary>:1
msgid ":py:obj:`minimumRange <abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange.minimumRange>`\\"
msgstr ""

#: ../../None:6:<autosummary>:1
msgid "A Float specifying the minimum value for the variable range."
msgstr ""

#: ../../None:6:<autosummary>:1
msgid ":py:obj:`maximumRange <abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange.maximumRange>`\\"
msgstr ""

#: ../../None:6:<autosummary>:1
msgid "A Float specifying the maximum value for the variable range."
msgstr ""

#: ../../None:6:<autosummary>:1
msgid ":py:obj:`insideRange <abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange.insideRange>`\\"
msgstr ""

#: ../../None:6:<autosummary>:1
msgid "A Boolean specifying the method used to evaluate the range."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange.__init__>`\\ \\(\\[minimumRange\\, maximumRange\\, ...\\]\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from elements with values lying in a variable range."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange.insideRange:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange.insideRange:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromSurfaceVarRange.LeafFromSurfaceVarRange.insideRange:1
msgid "A Boolean specifying the method used to evaluate the range. If **insideRange** = ON, the range falls inside the specified minimum and maximum values. The default value is ON."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange.maximumRange:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange.maximumRange:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromSurfaceVarRange.LeafFromSurfaceVarRange.maximumRange:1
msgid "A Float specifying the maximum value for the variable range. The default value is 3.40282346639e+038."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromElementVarRange.LeafFromElementVarRange.minimumRange:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange.minimumRange:1
#: ../../docstring of abaqus.DisplayGroup.LeafFromSurfaceVarRange.LeafFromSurfaceVarRange.minimumRange:1
msgid "A Float specifying the minimum value for the variable range. The default value is −3.40282346639E38."
msgstr ""

#: ../../reference/session/display.rst:109
msgid "LeafFromGeometry"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromGeometry.py:docstring of abaqus.DisplayGroup.LeafFromGeometry.LeafFromGeometry:1
msgid "The LeafFromGeometry object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromGeometry object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromGeometry.py:docstring of abaqus.DisplayGroup.LeafFromGeometry.LeafFromGeometry:13
msgid "Check `LeafFromGeometry on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromgeometrypyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromGeometry.LeafFromGeometry.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromGeometry.LeafFromGeometry.__init__>`\\ \\(\\[edgeSeq\\, faceSeq\\, cellSeq\\]\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of edge, face and cell geometry objects."
msgstr ""

#: ../../reference/session/display.rst:117
msgid "LeafFromInstance"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromInstance.py:docstring of abaqus.DisplayGroup.LeafFromInstance.LeafFromInstance:1
msgid "The LeafFromInstance object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromInstance object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromInstance.py:docstring of abaqus.DisplayGroup.LeafFromInstance.LeafFromInstance:13
msgid "Check `LeafFromInstance on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffrominstancepyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromInstance.LeafFromInstance.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromInstance.LeafFromInstance.__init__>`\\ \\(instances\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of part instance objects."
msgstr ""

#: ../../reference/session/display.rst:125
msgid "LeafFromInstanceElementLabels"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromInstanceElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromInstanceElementLabels.LeafFromInstanceElementLabels:1
msgid "The LeafFromInstanceElementLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromInstanceElementLabels object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromInstanceElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromInstanceElementLabels.LeafFromInstanceElementLabels:13
msgid "Check `LeafFromInstanceElementLabels on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffrominstanceelementlabelspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromInstanceElementLabels.LeafFromInstanceElementLabels.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromInstanceElementLabels.LeafFromInstanceElementLabels.__init__>`\\ \\(elementLabels\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of Strings specifying the element labels."
msgstr ""

#: ../../reference/session/display.rst:133
msgid "LeafFromInstanceNodeLabels"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromInstanceNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromInstanceNodeLabels.LeafFromInstanceNodeLabels:1
msgid "The LeafFromInstanceNodeLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromInstanceNodeLabels object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromInstanceNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromInstanceNodeLabels.LeafFromInstanceNodeLabels:13
msgid "Check `LeafFromInstanceNodeLabels on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffrominstancenodelabelspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromInstanceNodeLabels.LeafFromInstanceNodeLabels.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromInstanceNodeLabels.LeafFromInstanceNodeLabels.__init__>`\\ \\(nodeLabels\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of Strings specifying the node labels."
msgstr ""

#: ../../reference/session/display.rst:141
msgid "LeafFromMeshElementLabels"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromMeshElementLabels.LeafFromMeshElementLabels:1
msgid "The LeafFromMeshElementLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromMeshElementLabels object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromMeshElementLabels.LeafFromMeshElementLabels:13
msgid "Check `LeafFromMeshElementLabels on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffrommeshelementlabelspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromMeshElementLabels.LeafFromMeshElementLabels.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromMeshElementLabels.LeafFromMeshElementLabels.__init__>`\\ \\(elementSeq\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of mesh element objects."
msgstr ""

#: ../../reference/session/display.rst:149
msgid "LeafFromMeshNodeLabels"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromMeshNodeLabels.LeafFromMeshNodeLabels:1
msgid "The LeafFromMeshNodeLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromMeshNodeLabels object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromMeshNodeLabels.LeafFromMeshNodeLabels:13
msgid "Check `LeafFromMeshNodeLabels on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffrommeshnodelabelspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromMeshNodeLabels.LeafFromMeshNodeLabels.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromMeshNodeLabels.LeafFromMeshNodeLabels.__init__>`\\ \\(nodeSeq\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of mesh node objects."
msgstr ""

#: ../../reference/session/display.rst:157
msgid "LeafFromMeshSurfaceSets"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshSurfaceSets.py:docstring of abaqus.DisplayGroup.LeafFromMeshSurfaceSets.LeafFromMeshSurfaceSets:1
msgid "The LeafFromMeshSurfaceSets object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromMeshSurfaceSets object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromMeshSurfaceSets.py:docstring of abaqus.DisplayGroup.LeafFromMeshSurfaceSets.LeafFromMeshSurfaceSets:13
msgid "Check `LeafFromMeshSurfaceSets on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffrommeshsurfacesetspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromMeshSurfaceSets.LeafFromMeshSurfaceSets.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromMeshSurfaceSets.LeafFromMeshSurfaceSets.__init__>`\\ \\(surfaceSets\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of surface sets."
msgstr ""

#: ../../reference/session/display.rst:165
msgid "LeafFromModelElemLabels"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromModelElemLabels.py:docstring of abaqus.DisplayGroup.LeafFromModelElemLabels.LeafFromModelElemLabels:1
msgid "The LeafFromModelElemLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromModelElemLabels object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromModelElemLabels.py:docstring of abaqus.DisplayGroup.LeafFromModelElemLabels.LeafFromModelElemLabels:13
msgid "Check `LeafFromModelElemLabels on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffrommodelelemlabelspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromModelElemLabels.LeafFromModelElemLabels.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromModelElemLabels.LeafFromModelElemLabels.__init__>`\\ \\(elementLabels\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of element labels spanning several part instances."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromModelElemLabels.LeafFromModelElemLabels.elementLabels:1
msgid "A sequence of Strings specifying expressions that denote element labels per part instance in the model. Each part instance element expression is a sequence of a String specifying the part instance name and a sequence of element expressions; for example, `(('partInstance1',(1,'7','3:15;3'),), ('partInstance2','8'),))`. The element expressions can be any of the following:An Int specifying a single element label; for example, `1`.A String specifying a single element label; for example, `'7'`.A String specifying a sequence of element labels; for example, `'3:5'` and `'3:15:3'`."
msgstr ""

#: ../../reference/session/display.rst:173
msgid "LeafFromModelNodeLabels"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromModelNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromModelNodeLabels.LeafFromModelNodeLabels:1
msgid "The LeafFromModelNodeLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromModelNodeLabels object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromModelNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromModelNodeLabels.LeafFromModelNodeLabels:13
msgid "Check `LeafFromModelNodeLabels on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffrommodelnodelabelspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromModelNodeLabels.LeafFromModelNodeLabels.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromModelNodeLabels.LeafFromModelNodeLabels.__init__>`\\ \\(nodeLabels\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of node labels spanning several part instances."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromModelNodeLabels.LeafFromModelNodeLabels.nodeLabels:1
msgid "A sequence of Strings specifying expressions that denote node labels per part instance in the model. Each part instance node expression is a sequence of a String specifying the part instance name and a sequence of node expressions; for example, `(('partInstance1',(1,'7','3:15;3'),), ('partInstance2','8'),))`. The node expressions can be any of the following:An Int specifying a single node label; for example, `1`.A String specifying a single node label; for example, `'7'`.A String specifying a sequence of node labels; for example, `'3:5'` and `'3:15:3'`."
msgstr ""

#: ../../reference/session/display.rst:181
msgid "LeafFromNodeLabels"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromNodeLabels.LeafFromNodeLabels:1
msgid "The LeafFromNodeLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromNodeLabels object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromNodeLabels.LeafFromNodeLabels:13
msgid "Check `LeafFromNodeLabels on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromnodelabelspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromNodeLabels.LeafFromNodeLabels.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromNodeLabels.LeafFromNodeLabels.__init__>`\\ \\(partInstanceName\\, nodeLabels\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of node labels that belong to a single part instance."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromNodeLabels.LeafFromNodeLabels.nodeLabels:1
msgid "A sequence of Strings specifying expressions that denote node labels. The expression can be any of the following:An Int specifying a single node label; for example, `1`.A String specifying a single node label; for example, `'7'`.A String specifying a sequence of node labels; for example, `'3:5'` and `'3:15:3'`."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromNodeLabels.LeafFromNodeLabels.partInstanceName:1
msgid "A String specifying the name of the part instance to which **nodeLabels** refers."
msgstr ""

#: ../../reference/session/display.rst:189
msgid "LeafFromNodeSets"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeSets.py:docstring of abaqus.DisplayGroup.LeafFromNodeSets.LeafFromNodeSets:1
msgid "The LeafFromNodeSets object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromNodeSets object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeSets.py:docstring of abaqus.DisplayGroup.LeafFromNodeSets.LeafFromNodeSets:13
msgid "Check `LeafFromNodeSets on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromnodesetspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromNodeSets.LeafFromNodeSets.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromNodeSets.LeafFromNodeSets.__init__>`\\ \\(nodeSets\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of node sets."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromNodeSets.LeafFromNodeSets.nodeSets:1
msgid "A sequence of Strings specifying node sets or a String specifying a single node set."
msgstr ""

#: ../../reference/session/display.rst:197
msgid "LeafFromNodeVarRange"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeVarRange.py:docstring of abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange:1
msgid "The LeafFromNodeVarRange object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromNodeVarRange object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromNodeVarRange.py:docstring of abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange:13
msgid "Check `LeafFromNodeVarRange on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromnodevarrangepyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:6:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange.leafType>`\\"
msgstr ""

#: ../../None:6:<autosummary>:1
msgid ":py:obj:`minimumRange <abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange.minimumRange>`\\"
msgstr ""

#: ../../None:6:<autosummary>:1
msgid ":py:obj:`maximumRange <abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange.maximumRange>`\\"
msgstr ""

#: ../../None:6:<autosummary>:1
msgid ":py:obj:`insideRange <abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange.insideRange>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromNodeVarRange.LeafFromNodeVarRange.__init__>`\\ \\(\\[minimumRange\\, maximumRange\\, ...\\]\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from nodes with values lying in a variable range."
msgstr ""

#: ../../reference/session/display.rst:205
msgid "LeafFromOdbEdgePick"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbEdgePick.py:docstring of abaqus.DisplayGroup.LeafFromOdbEdgePick.LeafFromOdbEdgePick:1
msgid "The LeafFromOdbEdgePick object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromOdbEdgePick object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbEdgePick.py:docstring of abaqus.DisplayGroup.LeafFromOdbEdgePick.LeafFromOdbEdgePick:13
msgid "Check `LeafFromOdbEdgePick on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromodbedgepickpyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromOdbEdgePick.LeafFromOdbEdgePick.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromOdbEdgePick.LeafFromOdbEdgePick.__init__>`\\ \\(edgePick\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a tuple containing machine readable, compact strings defining the edges picked for each part instance."
msgstr ""

#: ../../reference/session/display.rst:213
msgid "LeafFromOdbElementLayups"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementLayups.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementLayups.LeafFromOdbElementLayups:1
msgid "The LeafFromOdbElementLayups object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromOdbElementLayups object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementLayups.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementLayups.LeafFromOdbElementLayups:13
msgid "Check `LeafFromOdbElementLayups on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromodbelementlayupspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromOdbElementLayups.LeafFromOdbElementLayups.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromOdbElementLayups.LeafFromOdbElementLayups.__init__>`\\ \\(elementLayups\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of Strings specifying layup names."
msgstr ""

#: ../../reference/session/display.rst:221
msgid "LeafFromOdbElementMaterials"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementMaterials.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementMaterials.LeafFromOdbElementMaterials:1
msgid "The LeafFromOdbElementMaterials object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromOdbElementMaterials object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementMaterials.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementMaterials.LeafFromOdbElementMaterials:13
msgid "Check `LeafFromOdbElementMaterials on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromodbelementmaterialspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromOdbElementMaterials.LeafFromOdbElementMaterials.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromOdbElementMaterials.LeafFromOdbElementMaterials.__init__>`\\ \\(elementMaterials\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of Strings specifying material names."
msgstr ""

#: ../../reference/session/display.rst:229
msgid "LeafFromOdbElementPick"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementPick.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementPick.LeafFromOdbElementPick:1
msgid "The LeafFromOdbElementPick object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromOdbElementPick object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementPick.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementPick.LeafFromOdbElementPick:13
msgid "Check `LeafFromOdbElementPick on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromodbelementpickpyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromOdbElementPick.LeafFromOdbElementPick.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromOdbElementPick.LeafFromOdbElementPick.__init__>`\\ \\(elementPick\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a tuple containing machine readable, compact strings defining the elements picked for each part instance."
msgstr ""

#: ../../reference/session/display.rst:237
msgid "LeafFromOdbElementPlies"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementPlies.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementPlies.LeafFromOdbElementPlies:1
msgid "The LeafFromOdbElementPlies object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromOdbElementPlies object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementPlies.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementPlies.LeafFromOdbElementPlies:13
msgid "Check `LeafFromOdbElementPlies on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromodbelementpliespyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromOdbElementPlies.LeafFromOdbElementPlies.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromOdbElementPlies.LeafFromOdbElementPlies.__init__>`\\ \\(elementPlies\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of Strings specifying ply names."
msgstr ""

#: ../../reference/session/display.rst:245
msgid "LeafFromOdbElementSections"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementSections.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementSections.LeafFromOdbElementSections:1
msgid "The LeafFromOdbElementSections object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromOdbElementSections object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementSections.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementSections.LeafFromOdbElementSections:13
msgid "Check `LeafFromOdbElementSections on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromodbelementsectionspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromOdbElementSections.LeafFromOdbElementSections.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromOdbElementSections.LeafFromOdbElementSections.__init__>`\\ \\(elementSections\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of Strings specifying section names."
msgstr ""

#: ../../reference/session/display.rst:253
msgid "LeafFromOdbElementTypes"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementTypes.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementTypes.LeafFromOdbElementTypes:1
msgid "The LeafFromOdbElementTypes object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromOdbElementTypes object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbElementTypes.py:docstring of abaqus.DisplayGroup.LeafFromOdbElementTypes.LeafFromOdbElementTypes:13
msgid "Check `LeafFromOdbElementTypes on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromodbelementtypespyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromOdbElementTypes.LeafFromOdbElementTypes.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromOdbElementTypes.LeafFromOdbElementTypes.__init__>`\\ \\(elementTypes\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of Strings specifying element names."
msgstr ""

#: ../../reference/session/display.rst:261
msgid "LeafFromOdbNodePick"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbNodePick.py:docstring of abaqus.DisplayGroup.LeafFromOdbNodePick.LeafFromOdbNodePick:1
msgid "The LeafFromOdbNodePick object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromOdbNodePick object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromOdbNodePick.py:docstring of abaqus.DisplayGroup.LeafFromOdbNodePick.LeafFromOdbNodePick:13
msgid "Check `LeafFromOdbNodePick on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromodbnodepickpyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromOdbNodePick.LeafFromOdbNodePick.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromOdbNodePick.LeafFromOdbNodePick.__init__>`\\ \\(nodePick\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a tuple containing machine readable, compact strings defining the nodes picked for each part instance."
msgstr ""

#: ../../reference/session/display.rst:269
msgid "LeafFromPartElementLabels"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromPartElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromPartElementLabels.LeafFromPartElementLabels:1
msgid "The LeafFromPartElementLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromPartElementLabels object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromPartElementLabels.py:docstring of abaqus.DisplayGroup.LeafFromPartElementLabels.LeafFromPartElementLabels:13
msgid "Check `LeafFromPartElementLabels on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffrompartelementlabelspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromPartElementLabels.LeafFromPartElementLabels.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromPartElementLabels.LeafFromPartElementLabels.__init__>`\\ \\(part\\, elementLabels\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of Strings specifying element labels."
msgstr ""

#: ../../reference/session/display.rst:277
msgid "LeafFromPartInstance"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromPartInstance.py:docstring of abaqus.DisplayGroup.LeafFromPartInstance.LeafFromPartInstance:1
msgid "The LeafFromPartInstance object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromPartInstance object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromPartInstance.py:docstring of abaqus.DisplayGroup.LeafFromPartInstance.LeafFromPartInstance:13
msgid "Check `LeafFromPartInstance on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffrompartinstancepyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromPartInstance.LeafFromPartInstance.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromPartInstance.LeafFromPartInstance.__init__>`\\ \\(partInstanceName\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a list of part instance names."
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromPartInstance.LeafFromPartInstance.partInstanceName:1
msgid "A sequence of Strings specifying the names of the part instances."
msgstr ""

#: ../../reference/session/display.rst:285
msgid "LeafFromPartNodeLabels"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromPartNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromPartNodeLabels.LeafFromPartNodeLabels:1
msgid "The LeafFromPartNodeLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromPartNodeLabels object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromPartNodeLabels.py:docstring of abaqus.DisplayGroup.LeafFromPartNodeLabels.LeafFromPartNodeLabels:13
msgid "Check `LeafFromPartNodeLabels on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffrompartnodelabelspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromPartNodeLabels.LeafFromPartNodeLabels.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromPartNodeLabels.LeafFromPartNodeLabels.__init__>`\\ \\(part\\, nodeLabels\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of Strings specifying node labels."
msgstr ""

#: ../../reference/session/display.rst:293
msgid "LeafFromReferencePoint"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromReferencePoint.py:docstring of abaqus.DisplayGroup.LeafFromReferencePoint.LeafFromReferencePoint:1
msgid "The LeafFromReferencePoint object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromReferencePoint object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromReferencePoint.py:docstring of abaqus.DisplayGroup.LeafFromReferencePoint.LeafFromReferencePoint:13
msgid "Check `LeafFromReferencePoint on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromreferencepointpyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromReferencePoint.LeafFromReferencePoint.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromReferencePoint.LeafFromReferencePoint.__init__>`\\ \\(refPtSeq\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of ReferencePoint objects."
msgstr ""

#: ../../reference/session/display.rst:301
msgid "LeafFromSets"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromSets.py:docstring of abaqus.DisplayGroup.LeafFromSets.LeafFromSets:1
msgid "The LeafFromSets object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromSets object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromSets.py:docstring of abaqus.DisplayGroup.LeafFromSets.LeafFromSets:13
msgid "Check `LeafFromSets on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromsetspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromSets.LeafFromSets.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromSets.LeafFromSets.__init__>`\\ \\(sets\\)"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid "This method creates a Leaf object from a sequence of Set objects."
msgstr ""

#: ../../reference/session/display.rst:309
msgid "LeafFromSurfaceSets"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromSurfaceSets.py:docstring of abaqus.DisplayGroup.LeafFromSurfaceSets.LeafFromSurfaceSets:1
msgid "The LeafFromSurfaceSets object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromSurfaceSets object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromSurfaceSets.py:docstring of abaqus.DisplayGroup.LeafFromSurfaceSets.LeafFromSurfaceSets:13
msgid "Check `LeafFromSurfaceSets on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromsurfacesetspyc.htm?contextscope=all>`__."
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`leafType <abaqus.DisplayGroup.LeafFromSurfaceSets.LeafFromSurfaceSets.leafType>`\\"
msgstr ""

#: ../../None:3:<autosummary>:1
msgid ":py:obj:`__init__ <abaqus.DisplayGroup.LeafFromSurfaceSets.LeafFromSurfaceSets.__init__>`\\ \\(surfaceSets\\)"
msgstr ""

#: ../../docstring of abaqus.DisplayGroup.LeafFromSurfaceSets.LeafFromSurfaceSets.surfaceSets:1
msgid "A sequence of Strings specifying surface sets, or a String specifying a single surface set."
msgstr ""

#: ../../reference/session/display.rst:317
msgid "LeafFromSurfaceVarRange"
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromSurfaceVarRange.py:docstring of abaqus.DisplayGroup.LeafFromSurfaceVarRange.LeafFromSurfaceVarRange:1
msgid "The LeafFromSurfaceVarRange object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments to DisplayGroup commands. The LeafFromSurfaceVarRange object is derived from the Leaf object."
msgstr ""

#: ../../../../src/abaqus/DisplayGroup/LeafFromSurfaceVarRange.py:docstring of abaqus.DisplayGroup.LeafFromSurfaceVarRange.LeafFromSurfaceVarRange:13
msgid "Check `LeafFromSurfaceVarRange on help.3ds.com/2022 <https://help.3ds.com/2022/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-leaffromsurfacevarrangepyc.htm?contextscope=all>`__."
msgstr ""
