# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, WANG Hailin
# This file is distributed under the same license as the abqpy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abqpy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-23 08:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../getting_started.rst:3
msgid "Getting Started"
msgstr ""

#: ../../getting_started.rst:7
msgid "Introduction"
msgstr ""

#: ../../getting_started.rst:9
msgid "`abqpy` is a Python package providing type hints for Python scripting of Abaqus, you can use it to write you Python script of Abaqus fluently, even without doing anything in Abaqus. It also provides some simple APIs to execute the Abaqus commands so that you can run your Python script to build the model, submit the job and extract the output data in just one Python script, even without opening the Abaqus/CAE."
msgstr ""

#: ../../getting_started.rst:17
msgid "Two Python interpreters"
msgstr ""

#: ../../getting_started.rst:19
msgid "Before we go any further, it is necessary for us to understand two Python interpreters."
msgstr ""

#: ../../getting_started.rst:21
msgid "When we use the Abaqus/CAE graphical user interface (GUI) to create a model and to visualize the results, commands are issued internally by Abaqus/CAE after every operation. These commands reflect the geometry you created along with the options and settings you selected from each dialog box. The GUI generates commands in an object-oriented programming language called Python. The commands issued by the GUI are sent to the Abaqus/CAE kernel. The kernel interprets the commands and uses the options and settings to create an internal representation of our model. The kernel is the brains behind Abaqus/CAE. The GUI is the interface between the user and the kernel."
msgstr ""

#: ../../getting_started.rst:30
msgid "In a word, Abaqus use Python language to interact with the Abaqus kernel, everything that can be done in Abaqus/CAE, can also be done using Python script. Abaqus has already installed a Python interpreter so that Abaqus/CAE can use it to interact with the Abaqus kernel."
msgstr ""

#: ../../getting_started.rst:34
msgid "For some reasons, we cannot directly use the Python interpreter inside Abaqus to build an Abaqus model. But fortunately, we can use the commands provided by Abaqus to access it. i.e."
msgstr ""

#: ../../getting_started.rst:56
msgid "Usually, we can use the noGUI-file or script-file to execute our Python script in Abaqus."
msgstr ""

#: ../../getting_started.rst:58
msgid "Another Python interpreter, is the Python interpreter installed by ourselves, where `abqpy` is installed. `abqpy` provides a bridge to connect our Python script to Abaqus Python interpreter, it provides type hints for Python scripting for Abaqus, enabling us to write a Abaqus Python script quickly."
msgstr ""

#: ../../getting_started.rst:65
msgid "How does this package work?"
msgstr ""

#: ../../getting_started.rst:67
msgid "`abqpy` is just a package to provide type hints for Abaqus/Python scripting, it is installed outside Abaqus/Python environment, you can use `abqpy` to write your Abaqus/Python scripts, and run the scripts inside Abaqus on your own. However, with the help of Abaqus command, an easier way can be achieved: **you can actually run the script using your own Python interpreter without opening Abaqus**, which is achieved via the **abaqus** command like this:"
msgstr ""

#: ../../getting_started.rst:76
msgid "The secret is hided in the :py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` method:"
msgstr ""

#: ../../getting_started.rst:86
msgid "In this package, the :py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` method is reimplemented, if you call this method in your script (i.e., `mdb.saveAs('model.cae')`), the Python interpreter (not Abaqus Python interpreter) will use the **abaqus** command to submit this script to Abaqus, when it is submited to Abaqus, :py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` will be just a normal method to save the model because `abqpy` is not installed in Abaqus Python interpreter."
msgstr ""

#: ../../getting_started.rst:91
msgid "In the output script, we might not have to use the :py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` method, then another similar method :py:meth:`~abaqus.Session.Session.Session.openOdb` is also reimplemented:"
msgstr ""

#: ../../getting_started.rst:102
msgid "Therefore, if you want to run your Python script in Abaqus Python environment, please make sure to use these methods."
msgstr ""

#: ../../getting_started.rst:105
msgid "Installation"
msgstr ""

#: ../../getting_started.rst:107
msgid "`abqpy` supports Python 3.7 or a later version. If you are using Python 3.6 or an earlier version, please upgrade to Python 3.7 or a later version."
msgstr ""

#: ../../getting_started.rst:110
msgid "`abqpy` is uploaded to `PyPI <https://pypi.org/project/abqpy>`_, you can simply install it using pip, since abqpy (from V1.0.15) depends on `ipynbname` and it is not distributed to anaconda, you have to use `pip` to install it manually:"
msgstr ""

#: ../../getting_started.rst:118
msgid "`abqpy` is also uploaded to `anaconda <https://anaconda.org/haiiliin/abqpy>`_, you can use `conda` to install it:"
msgstr ""

#: ../../getting_started.rst:126
msgid "You may install the latest development version by cloning the `GitHub repository <https://github.com/haiiliin/abqpy>`_ and use `python` to install from the local directory:"
msgstr ""

#: ../../getting_started.rst:138
msgid "Install A Specific Version"
msgstr ""

#: ../../getting_started.rst:140
msgid "You can specify the version number when installing `abqpy`, for example:"
msgstr ""

#: ../../getting_started.rst:147
msgid "A better way is to use * to match specific version:"
msgstr ""

#: ../../getting_started.rst:155
msgid "Abaqus command"
msgstr ""

#: ../../getting_started.rst:157
msgid "In order to use Abaqus command to execute the Python script and submit the job, you need to tell `abqpy` where the Abaqus command located. Usually, Abaqus command locates in a directory like this:"
msgstr ""

#: ../../getting_started.rst:164
msgid "You can add the directory `C:/SIMULIA/Commands` to the system environment variable `Path`, or you can create a new system variable named `ABAQUS_BAT_PATH`, and set the value to the file path of the Abaqus command, i.e., `C:/SIMULIA/Commands/abaqus.bat`."
msgstr ""
