msgid ""
msgstr ""
"Project-Id-Version: abqpy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-05 10:09+0000\n"
"PO-Revision-Date: 2023-05-09 05:24\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: abqpy\n"
"X-Crowdin-Project-ID: 586177\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /2023/docs/source/locales/zh_CN/LC_MESSAGES/getting_started.po\n"
"X-Crowdin-File-ID: 657\n"

#: ../../getting_started.md:1
msgid "Getting Started"
msgstr ""

#: ../../getting_started.md:3
msgid "Introduction"
msgstr ""

#: ../../getting_started.md:5
msgid "`abqpy` is a Python package providing type hints for Python scripting of Abaqus, you can use it to write you Python script of Abaqus fluently, even without doing anything in Abaqus. It also provides some simple APIs to execute the Abaqus commands so that you can run your Python script to build the model, submit the job and extract the output data in just one Python script, even without opening the Abaqus/CAE."
msgstr ""

#: ../../getting_started.md:11
msgid "Installation"
msgstr ""

#: ../../getting_started.md:13
msgid "Make sure <a href=\"https://www.python.org/downloads/\"> <img src=\"https://img.shields.io/badge/Python-3.7%2B-brightgreen\" align=center /> </a> and  <a href=\"https://www.3ds.com/products-services/simulia/products/abaqus/\"> <img src=\"https://img.shields.io/badge/Abaqus-2016%2B-brightgreen\" align=center /> </a> are installed on your computer before installing `abqpy`."
msgstr ""

#: ../../getting_started.md:17
msgid "You can install `abqpy` with the following commands."
msgstr ""

#: ../../getting_started.md
msgid "Install with pip"
msgstr ""

#: ../../getting_started.md
msgid "Install from source"
msgstr ""

#: ../../getting_started.md
msgid "Install with jupyter notebook support"
msgstr ""

#: ../../getting_started.md:44
msgid "You are recommended to install the corresponding version of Abaqus and `abqpy` to avoid any compatibility issues."
msgstr ""

#: ../../getting_started.md:47
msgid "Two Python interpreters"
msgstr ""

#: ../../getting_started.md:49
msgid "Before we go any further, it is necessary for us to understand two Python interpreters."
msgstr ""

#: ../../getting_started.md:51
msgid "When we use the Abaqus/CAE graphical user interface (GUI) to create a model and to visualize the results, commands are issued internally by Abaqus/CAE after every operation. These commands reflect the geometry you created along with the options and settings you selected from each dialog box. The GUI generates commands in an object-oriented programming language called Python. The commands issued by the GUI are sent to the Abaqus/CAE kernel. The kernel interprets the commands and uses the options and settings to create an internal representation of our model. The kernel is the brains behind Abaqus/CAE. The GUI is the interface between the user and the kernel."
msgstr ""

#: ../../getting_started.md:60
msgid "In a word, Abaqus use Python language to interact with the Abaqus kernel, everything that can be done in Abaqus/CAE, can also be done using Python script. Abaqus has already installed a Python interpreter so that Abaqus/CAE can use it to interact with the Abaqus kernel."
msgstr ""

#: ../../getting_started.md:64
msgid "For some reasons, we cannot directly use the Python interpreter inside Abaqus to build an Abaqus model. But fortunately, we can use the commands provided by Abaqus to access it. i.e."
msgstr ""

#: ../../getting_started.md:85
msgid "Usually, we can use the noGUI-file or script-file to execute our Python script in Abaqus."
msgstr ""

#: ../../getting_started.md:87
msgid "Another Python interpreter, is the Python interpreter installed by ourselves, where `abqpy` is installed. `abqpy` provides a bridge to connect our Python script to Abaqus Python interpreter, it provides type hints for Python scripting for Abaqus, enabling us to write a Abaqus Python script quickly."
msgstr ""

#: ../../getting_started.md:92
msgid "How does this package work?"
msgstr ""

#: ../../getting_started.md:94
msgid "`abqpy` is just a package to provide type hints for Abaqus/Python scripting, it is installed outside Abaqus/Python environment, you can use `abqpy` to write your Abaqus/Python scripts, and run the scripts inside Abaqus on your own. However, with the help of Abaqus command, an easier way can be achieved: **you can actually run the script using your own Python interpreter without opening Abaqus**, which is achieved via the **abaqus** command like this:"
msgstr ""

#: ../../getting_started.md:103
msgid "The secret is hided in the {py:func}`~abqpy.run.run` function:"
msgstr ""

#: ../../getting_started.md:119
msgid "In this package, the {py:mod}`~abaqus` module is reimplemented to automatically call this function. If you import this module in the top of your script (i.e., `from abaqus import *`), your Python interpreter (not Abaqus Python interpreter) will call this function and use the **abaqus** command to submit the script to Abaqus. After it is submitted to Abaqus, {py:func}`~abqpy.run.run` will exit the interpreter, because the script will already run in Abaqus Python interpreter."
msgstr ""

#: ../../getting_started.md:124
msgid "In the output script, we might not want to always use the {py:mod}`~abaqus` module, because it needs the Abaqus/CAE kernel (and its license). Instead, we use the module {py:mod}`~odbAccess` (i.e., `from odbAccess import *`), which requires only the Abaqus Python interpreter. Then, another similar **abaqus** command line is needed:"
msgstr ""

#: ../../getting_started.md:132
msgid "So, the {py:mod}`~odbAccess` module is also reimplemented to call the {py:func}`~abqpy.run.run` function with the argument `cae = False`."
msgstr ""

#: ../../getting_started.md:134
msgid "In summary, the {py:func}`~abqpy.run.run` function will be called when you import one of the two modules ({py:mod}`~abaqus` or {py:mod}`~odbAccess`). It will pass the argument `cae = True` in {py:mod}`~abaqus` module and `cae = False` in {py:mod}`~odbAccess` module. Therefore, if you want to run your Python script in Abaqus Python environment, please make sure to import one of these modules on the top of your script."
msgstr ""

#: ../../getting_started.md:139
msgid "Write your Abaqus/Python script"
msgstr ""

#: ../../getting_started.md:141
msgid "After installing the `abqpy` package, you can start writing your own Abaqus/Python script to build your model. You can refer [abqpy/examples at main · haiiliin/abqpy](https://github.com/haiiliin/abqpy/tree/main/examples) for some script examples. Or you may go {doc}`/tutorials` for a simple tutorial. For more documentation about Abaqus/Python scripting, please check {doc}`/reference/index` for more detailed API references."
msgstr ""

#: ../../getting_started.md:147
msgid "Setup your Abaqus Environment"
msgstr ""

#: ../../getting_started.md:149
msgid "Make sure the `abaqus` command is available in the command line (i.e., you can run `abaqus` in the command line), otherwise, add a new system variable named `ABAQUS_BAT_PATH`, and set the value to the file path of the Abaqus command, for example, `C:/SIMULIA/Commands/abaqus.bat`."
msgstr ""

#: ../../getting_started.md:153
msgid "Run your Abaqus/Python script"
msgstr ""

#: ../../getting_started.md:155
msgid "Now you can just run your Abaqus/Python script using your own Python interpreter that `abqpy` is installed."
msgstr ""

#: ../../getting_started.md:157 ../../getting_started.md:159
msgid "Create an Abaqus Model"
msgstr ""

#: ../../getting_started.md:165 ../../getting_started.md:167
msgid "Extract Output Data"
msgstr ""

#: ../../getting_started.md:174
msgid "`abqpy` does not support debugging since Abaqus does not provide a debugger for Python scripting outside Abaqus/CAE. If you run the script under the debug mode, the script will not be submitted to Abaqus, but it will run in the Python interpreter where `abqpy` is installed. Since `abqpy` does not implement the whole Abaqus/Python APIs, the script may not (and most likely) run correctly. However, for some simple scripts, it may work, in this way you can use the debugger to check the variables in the Abaqus API roughly. But still, the script will not be submitted to Abaqus."
msgstr ""

#: ../../getting_started.md:182
msgid "Comments"
msgstr ""

#~ msgid ""
#~ "`abqpy` is uploaded to `PyPI "
#~ "<https://pypi.org/project/abqpy>`_, you can simply"
#~ " install it using pip, since abqpy"
#~ " (from V1.0.15) depends on `ipynbname` "
#~ "and it is not distributed to "
#~ "anaconda, you have to use `pip` to"
#~ " install it manually:"
#~ msgstr ""
#~ "`abqpy` 被上传到 `PyPI "
#~ "<https://pypi.org/project/abqpy>`_，你可以简单地使用 pip 安装它，因为 "
#~ "`abqpy` 依赖于 `ipynbname` （从 V1.0.15 开始），而"
#~ " `ipynbname` 并没有被上传到 Anaconda，因此你必须使用 `pip` "
#~ "手动安装它："

#~ msgid ""
#~ "In this package, the "
#~ ":py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` method is "
#~ "reimplemented, if you call this method"
#~ " in your script (i.e., "
#~ "`mdb.saveAs('model.cae')`), the Python interpreter"
#~ " (not Abaqus Python interpreter) will "
#~ "use the **abaqus** command to submit "
#~ "this script to Abaqus, when it is"
#~ " submited to Abaqus, "
#~ ":py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` will be just"
#~ " a normal method to save the "
#~ "model because `abqpy` is not installed"
#~ " in Abaqus Python interpreter."
#~ msgstr ""
#~ "在此包中，:py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` "
#~ "方法被重新实现，如果你在脚本中调用此方法（即 `mdb.saveAs('model.cae')`），Python "
#~ "解释器（而非 Abaqus Python 解释器）将使用 **abaqus** "
#~ "命令将此脚本提交给 Abaqus，当它被提交给 Abaqus "
#~ "时，:py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` 只是保存模型的一个正常方法，因为 "
#~ "`abqpy` 并没有被安装在 Abaqus Python 解释器中。"

#~ msgid ""
#~ "In the output script, we might not"
#~ " have to use the "
#~ ":py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` method, then "
#~ "another similar method "
#~ ":py:meth:`~abaqus.Session.Session.Session.openOdb` is also"
#~ " reimplemented:"
#~ msgstr ""
#~ "在输出脚本中，我们可能不必使用 :py:meth:`~abaqus.Mdb.Mdb.Mdb.saveAs` "
#~ "方法，另一个类似的方法 :py:meth:`~abaqus.Session.Session.Session.openOdb`"
#~ " 也被重新实现："

#~ msgid ""
#~ "Therefore, if you want to run your"
#~ " Python script in Abaqus Python "
#~ "environment, please make sure to use "
#~ "these methods."
#~ msgstr "因此，如果您想在 Abaqus Python 环境中运行 Python 脚本，请确保使用这些方法。"

#~ msgid ""
#~ "In this package, the :py:mod:`~abaqus` "
#~ "module is reimplemented to automatically "
#~ "call this function. If you import "
#~ "this module in the top of your "
#~ "script (i.e., ``from abaqus import *``),"
#~ " your Python interpreter (not Abaqus "
#~ "Python interpreter) will call this "
#~ "function and use the **abaqus** command"
#~ " to submit the script to Abaqus. "
#~ "After it is submitted to Abaqus, "
#~ ":py:meth:`~abqpy.abaqus.run()` will exit the "
#~ "interpreter, because the script will "
#~ "already run in Abaqus Python "
#~ "interpreter."
#~ msgstr ""

#~ msgid ""
#~ "In the output script, we might not"
#~ " want to always use the "
#~ ":py:mod:`~abaqus` module, which needs the "
#~ "Abaqus/CAE kernel (and its license), but"
#~ " instead the module :py:mod:`~odbAccess` "
#~ "(i.e., ``from odbAccess import *``), "
#~ "which requires only the Abaqus Python"
#~ " interpreter. Then another similar "
#~ "**abaqus** command line is needed:"
#~ msgstr ""

#~ msgid ""
#~ "So, :py:mod:`~odbAccess` is also reimplemented"
#~ " to call the :py:meth:`~abqpy.abaqus.run()` "
#~ "function, and the actual implementation "
#~ "of this function is similar to:"
#~ msgstr ""

#~ msgid "Abaqus command"
#~ msgstr "Abaqus 命令"

#~ msgid ""
#~ "In order to use Abaqus command to"
#~ " execute the Python script and submit"
#~ " the job, you need to tell "
#~ "`abqpy` where the Abaqus command "
#~ "located. Usually, Abaqus command locates "
#~ "in a directory like this:"
#~ msgstr ""
#~ "为了使用 Abaqus 命令执行 Python 脚本并提交作业，您需要告诉 "
#~ "`abqpy` Abaqus 命令所在的位置。通常，Abaqus 命令位于如下目录中："

#~ msgid ""
#~ "You may wonder how does this "
#~ "package work, you can go "
#~ ":doc:`/getting_started` for more detailed "
#~ "introduction and go :doc:`/tutorials` for "
#~ "a simple tutorial. For more "
#~ "documentation about Abaqus/Python scripting, "
#~ "please check :doc:`/summary` for a list"
#~ " of descriptions of objects and "
#~ "methods of Abaqus models, check "
#~ ":doc:`/references` for more detailed API "
#~ "references."
#~ msgstr ""

#~ msgid ""
#~ "In this package, the :py:mod:`~abaqus` "
#~ "module is reimplemented to automatically "
#~ "call this function. If you import "
#~ "this module in the top of your "
#~ "script (i.e., ``from abaqus import *``),"
#~ " your Python interpreter (not Abaqus "
#~ "Python interpreter) will call this "
#~ "function and use the **abaqus** command"
#~ " to submit the script to Abaqus. "
#~ "After it is submitted to Abaqus, "
#~ ":py:meth:`~abqpy.abaqus.run` will exit the "
#~ "interpreter, because the script will "
#~ "already run in Abaqus Python "
#~ "interpreter."
#~ msgstr ""

#~ msgid ""
#~ "In the output script, we might not"
#~ " want to always use the "
#~ ":py:mod:`~abaqus` module, because it needs "
#~ "the Abaqus/CAE kernel (and its license)."
#~ " Instead, we use the module "
#~ ":py:mod:`~odbAccess` (i.e., ``from odbAccess "
#~ "import *``), which requires only the "
#~ "Abaqus Python interpreter. Then, another "
#~ "similar **abaqus** command line is "
#~ "needed:"
#~ msgstr ""

#~ msgid ""
#~ "So, the :py:mod:`~odbAccess` module is "
#~ "also reimplemented to call the "
#~ ":py:meth:`~abqpy.abaqus.run` function, and the "
#~ "actual implementation of this function "
#~ "is similar to:"
#~ msgstr ""

#~ msgid ""
#~ "In summary: this function will be "
#~ "called when you import one of the"
#~ " two modules (:py:mod:`~abaqus` or "
#~ ":py:mod:`~odbAccess`). It will pass the "
#~ "argument ``cae = True`` in "
#~ ":py:mod:`~abaqus` module and ``cae = "
#~ "False`` in :py:mod:`~odbAccess` module. "
#~ "Therefore, if you want to run your"
#~ " Python script in Abaqus Python "
#~ "environment, please make sure to import"
#~ " one of these modules on the "
#~ "top of your script."
#~ msgstr ""

#~ msgid ""
#~ "`abqpy` is uploaded to `PyPI "
#~ "<https://pypi.org/project/abqpy>`_, you can simply"
#~ " install it using pip:"
#~ msgstr ""
#~ "`abqpy` 也被上传到 `anaconda "
#~ "<https://anaconda.org/haiiliin/abqpy>`_，你可以使用`conda`来安装它："

#~ msgid ""
#~ "You may install the latest development"
#~ " version by cloning the `GitHub "
#~ "repository <https://github.com/haiiliin/abqpy>`_ and "
#~ "use `python` to install from the "
#~ "local directory:"
#~ msgstr ""
#~ "您可以通过克隆 `GitHub仓库 <https://github.com/haiiliin/abqpy>`_"
#~ " 来安装最新的开发版本，并使用 `python` 从本地目录进行安装："

#~ msgid "Optional Requirements"
#~ msgstr ""

#~ msgid ""
#~ "If you want to use the Jupyter "
#~ "notebook to write your Abaqus/Python "
#~ "scripts, you need to install "
#~ "`ipynbname`:"
#~ msgstr ""

#~ msgid "Using `pip`:"
#~ msgstr ""

#~ msgid "Using `conda`:"
#~ msgstr ""

#~ msgid "A better way is to use * to match specific version:"
#~ msgstr "更好的方法是使用 * 来匹配特定版本："

#~ msgid ""
#~ "After installing the `abqpy` package, "
#~ "you can start writing your own "
#~ "Abaqus/Python script to build your "
#~ "model. You can refer `abqpy/examples at"
#~ " main · haiiliin/abqpy "
#~ "<https://github.com/haiiliin/abqpy/tree/main/examples>`_ for "
#~ "some tests of the script, for more"
#~ " detailed documentation, please check "
#~ "`abqpy documentation <https://haiiliin.com/abqpy/>`_."
#~ msgstr ""

#~ msgid ""
#~ "You may wonder how does this "
#~ "package work, you can go "
#~ ":doc:`/getting_started` for more detailed "
#~ "introduction and go :doc:`/tutorials` for "
#~ "a simple tutorial. For more "
#~ "documentation about Abaqus/Python scripting, "
#~ "please check :doc:`/references` for more "
#~ "detailed API references."
#~ msgstr ""

#~ msgid "Working with conda?"
#~ msgstr ""

#~ msgid "Prefer pip?"
#~ msgstr ""

#~ msgid ""
#~ "abqpy can also be installed via "
#~ "pip from `PyPI <https://pypi.org/project/abqpy>`__."
#~ msgstr ""

#~ msgid "Install from source?"
#~ msgstr ""

#~ msgid ""
#~ "`abqpy` supports Python 3.7 or a "
#~ "later version. If you are using "
#~ "Python 3.6 or an earlier version, "
#~ "please upgrade to Python 3.7 or a"
#~ " later version."
#~ msgstr ""
#~ "`abqpy` 支持 Python 3.7 或更高版本。如果您使用的是 "
#~ "Python 3.6 或更早版本，请升级到 Python 3.7 或更高版本。"

#~ msgid ""
#~ "abqpy can be installed via pip "
#~ "from `PyPI <https://pypi.org/project/abqpy>`__."
#~ msgstr ""
#~ "`abqpy` 也被上传到 `anaconda "
#~ "<https://anaconda.org/haiiliin/abqpy>`_，你可以使用`conda`来安装它："

#~ msgid "You can also install `abqpy` from source:"
#~ msgstr ""

#~ msgid "Install a specific version"
#~ msgstr "安装特定版本"

#~ msgid ""
#~ "You can specify the version number "
#~ "when installing `abqpy`, for example:"
#~ msgstr "您可以在安装 `abqpy` 时指定版本号，例如："

#~ msgid "Optional dependencies"
#~ msgstr ""

#~ msgid ""
#~ "If you want to use the Jupyter "
#~ "notebook to write your Abaqus/Python "
#~ "scripts, use the following command:"
#~ msgstr ""

#~ msgid ""
#~ "In this package, the {py:mod}`~abaqus` "
#~ "module is reimplemented to automatically "
#~ "call this function. If you import "
#~ "this module in the top of your "
#~ "script (i.e., `from abaqus import *`),"
#~ " your Python interpreter (not Abaqus "
#~ "Python interpreter) will call this "
#~ "function and use the **abaqus** command"
#~ " to submit the script to Abaqus. "
#~ "After it is submitted to Abaqus, "
#~ "{py:meth}`~abqpy.abaqus.run` will exit the "
#~ "interpreter, because the script will "
#~ "already run in Abaqus Python "
#~ "interpreter."
#~ msgstr ""

#~ msgid ""
#~ "So, the {py:mod}`~odbAccess` module is "
#~ "also reimplemented to call the "
#~ "{py:meth}`~abqpy.abaqus.run` function, and the "
#~ "actual implementation of this function "
#~ "is similar to:"
#~ msgstr ""

#~ msgid ""
#~ "In summary: this function will be "
#~ "called when you import one of the"
#~ " two modules ({py:mod}`~abaqus` or "
#~ "{py:mod}`~odbAccess`). It will pass the "
#~ "argument `cae = True` in "
#~ "{py:mod}`~abaqus` module and `cae = "
#~ "False` in {py:mod}`~odbAccess` module. "
#~ "Therefore, if you want to run your"
#~ " Python script in Abaqus Python "
#~ "environment, please make sure to import"
#~ " one of these modules on the "
#~ "top of your script."
#~ msgstr ""

#~ msgid ""
#~ "After installing the `abqpy` package, "
#~ "you can start writing your own "
#~ "Abaqus/Python script to build your "
#~ "model. You can refer [abqpy/examples at"
#~ " main · "
#~ "haiiliin/abqpy](https://github.com/haiiliin/abqpy/tree/main/examples)"
#~ " for some tests of the script, "
#~ "for more detailed documentation, please "
#~ "check [abqpy documentation](https://haiiliin.com/abqpy/)."
#~ msgstr ""

#~ msgid ""
#~ "In order to use Abaqus command to"
#~ " execute the Python script and submit"
#~ " the job, you need to tell "
#~ "`abqpy` where the Abaqus command is "
#~ "located. Usually, Abaqus command locates "
#~ "in a directory like this:"
#~ msgstr ""
#~ "为了使用 Abaqus 命令执行 Python 脚本并提交作业，您需要告诉 "
#~ "`abqpy` Abaqus 命令所在的位置。通常，Abaqus 命令位于如下目录中："

#~ msgid "What next?"
#~ msgstr ""

#~ msgid ""
#~ "You may wonder how does this "
#~ "package work, you can go "
#~ "{doc}`/getting_started` for more detailed "
#~ "introduction and go {doc}`/tutorials` for "
#~ "a simple tutorial. For more "
#~ "documentation about Abaqus/Python scripting, "
#~ "please check {doc}`/references` for more "
#~ "detailed API references."
#~ msgstr ""

#~ msgid ""
#~ "In this package, the {py:mod}`~abaqus` "
#~ "module is reimplemented to automatically "
#~ "call this function. If you import "
#~ "this module in the top of your "
#~ "script (i.e., `from abaqus import *`),"
#~ " your Python interpreter (not Abaqus "
#~ "Python interpreter) will call this "
#~ "function and use the **abaqus** command"
#~ " to submit the script to Abaqus. "
#~ "After it is submitted to Abaqus, "
#~ "{py:func}`~abqpy.abaqus.run` will exit the "
#~ "interpreter, because the script will "
#~ "already run in Abaqus Python "
#~ "interpreter."
#~ msgstr ""

#~ msgid ""
#~ "So, the {py:mod}`~odbAccess` module is "
#~ "also reimplemented to call the "
#~ "{py:func}`~abqpy.abaqus.run` function with the "
#~ "argument `cae = False`."
#~ msgstr ""

#~ msgid ""
#~ "In summary, the {py:func}`~abqpy.abaqus.run` "
#~ "function will be called when you "
#~ "import one of the two modules "
#~ "({py:mod}`~abaqus` or {py:mod}`~odbAccess`). It "
#~ "will pass the argument `cae = "
#~ "True` in {py:mod}`~abaqus` module and "
#~ "`cae = False` in {py:mod}`~odbAccess` "
#~ "module. Therefore, if you want to "
#~ "run your Python script in Abaqus "
#~ "Python environment, please make sure to"
#~ " import one of these modules on "
#~ "the top of your script."
#~ msgstr ""

